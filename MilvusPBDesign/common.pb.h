// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace demo {
class ColumnSchemaPB;
class ColumnSchemaPBDefaultTypeInternal;
extern ColumnSchemaPBDefaultTypeInternal _ColumnSchemaPB_default_instance_;
class ColumnTypePB;
class ColumnTypePBDefaultTypeInternal;
extern ColumnTypePBDefaultTypeInternal _ColumnTypePB_default_instance_;
class CreateTableRequestPB;
class CreateTableRequestPBDefaultTypeInternal;
extern CreateTableRequestPBDefaultTypeInternal _CreateTableRequestPB_default_instance_;
class CreateTableResponsePB;
class CreateTableResponsePBDefaultTypeInternal;
extern CreateTableResponsePBDefaultTypeInternal _CreateTableResponsePB_default_instance_;
class TableSchemaPB;
class TableSchemaPBDefaultTypeInternal;
extern TableSchemaPBDefaultTypeInternal _TableSchemaPB_default_instance_;
class VectorColumnInfoPB;
class VectorColumnInfoPBDefaultTypeInternal;
extern VectorColumnInfoPBDefaultTypeInternal _VectorColumnInfoPB_default_instance_;
}  // namespace demo
PROTOBUF_NAMESPACE_OPEN
template<> ::demo::ColumnSchemaPB* Arena::CreateMaybeMessage<::demo::ColumnSchemaPB>(Arena*);
template<> ::demo::ColumnTypePB* Arena::CreateMaybeMessage<::demo::ColumnTypePB>(Arena*);
template<> ::demo::CreateTableRequestPB* Arena::CreateMaybeMessage<::demo::CreateTableRequestPB>(Arena*);
template<> ::demo::CreateTableResponsePB* Arena::CreateMaybeMessage<::demo::CreateTableResponsePB>(Arena*);
template<> ::demo::TableSchemaPB* Arena::CreateMaybeMessage<::demo::TableSchemaPB>(Arena*);
template<> ::demo::VectorColumnInfoPB* Arena::CreateMaybeMessage<::demo::VectorColumnInfoPB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace demo {

enum DataType : int {
  NULL_ = 0,
  INT8 = 1,
  INT16 = 2,
  INT32 = 3,
  INT64 = 4,
  STRING = 20,
  BOOL = 30,
  FLOAT = 40,
  HALFFLOAT = 41,
  DOUBLE = 42,
  VECTOR = 100,
  UNKNOWN = 9999,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = NULL_;
constexpr DataType DataType_MAX = UNKNOWN;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    const std::string& name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class VectorColumnInfoPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.VectorColumnInfoPB) */ {
 public:
  VectorColumnInfoPB();
  virtual ~VectorColumnInfoPB();

  VectorColumnInfoPB(const VectorColumnInfoPB& from);
  VectorColumnInfoPB(VectorColumnInfoPB&& from) noexcept
    : VectorColumnInfoPB() {
    *this = ::std::move(from);
  }

  inline VectorColumnInfoPB& operator=(const VectorColumnInfoPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorColumnInfoPB& operator=(VectorColumnInfoPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorColumnInfoPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorColumnInfoPB* internal_default_instance() {
    return reinterpret_cast<const VectorColumnInfoPB*>(
               &_VectorColumnInfoPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VectorColumnInfoPB& a, VectorColumnInfoPB& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorColumnInfoPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorColumnInfoPB* New() const final {
    return CreateMaybeMessage<VectorColumnInfoPB>(nullptr);
  }

  VectorColumnInfoPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorColumnInfoPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorColumnInfoPB& from);
  void MergeFrom(const VectorColumnInfoPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorColumnInfoPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.VectorColumnInfoPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionFieldNumber = 1,
    kElementTypeFieldNumber = 2,
  };
  // int64 dimension = 1;
  void clear_dimension();
  ::PROTOBUF_NAMESPACE_ID::int64 dimension() const;
  void set_dimension(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dimension() const;
  void _internal_set_dimension(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .demo.DataType element_type = 2;
  void clear_element_type();
  ::demo::DataType element_type() const;
  void set_element_type(::demo::DataType value);
  private:
  ::demo::DataType _internal_element_type() const;
  void _internal_set_element_type(::demo::DataType value);
  public:

  // @@protoc_insertion_point(class_scope:demo.VectorColumnInfoPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 dimension_;
  int element_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ColumnTypePB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.ColumnTypePB) */ {
 public:
  ColumnTypePB();
  virtual ~ColumnTypePB();

  ColumnTypePB(const ColumnTypePB& from);
  ColumnTypePB(ColumnTypePB&& from) noexcept
    : ColumnTypePB() {
    *this = ::std::move(from);
  }

  inline ColumnTypePB& operator=(const ColumnTypePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnTypePB& operator=(ColumnTypePB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColumnTypePB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColumnTypePB* internal_default_instance() {
    return reinterpret_cast<const ColumnTypePB*>(
               &_ColumnTypePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ColumnTypePB& a, ColumnTypePB& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnTypePB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnTypePB* New() const final {
    return CreateMaybeMessage<ColumnTypePB>(nullptr);
  }

  ColumnTypePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnTypePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnTypePB& from);
  void MergeFrom(const ColumnTypePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnTypePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.ColumnTypePB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .demo.VectorColumnInfoPB info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::demo::VectorColumnInfoPB& info() const;
  ::demo::VectorColumnInfoPB* release_info();
  ::demo::VectorColumnInfoPB* mutable_info();
  void set_allocated_info(::demo::VectorColumnInfoPB* info);
  private:
  const ::demo::VectorColumnInfoPB& _internal_info() const;
  ::demo::VectorColumnInfoPB* _internal_mutable_info();
  public:

  // .demo.DataType type = 1;
  void clear_type();
  ::demo::DataType type() const;
  void set_type(::demo::DataType value);
  private:
  ::demo::DataType _internal_type() const;
  void _internal_set_type(::demo::DataType value);
  public:

  // @@protoc_insertion_point(class_scope:demo.ColumnTypePB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::demo::VectorColumnInfoPB* info_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ColumnSchemaPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.ColumnSchemaPB) */ {
 public:
  ColumnSchemaPB();
  virtual ~ColumnSchemaPB();

  ColumnSchemaPB(const ColumnSchemaPB& from);
  ColumnSchemaPB(ColumnSchemaPB&& from) noexcept
    : ColumnSchemaPB() {
    *this = ::std::move(from);
  }

  inline ColumnSchemaPB& operator=(const ColumnSchemaPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnSchemaPB& operator=(ColumnSchemaPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColumnSchemaPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColumnSchemaPB* internal_default_instance() {
    return reinterpret_cast<const ColumnSchemaPB*>(
               &_ColumnSchemaPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ColumnSchemaPB& a, ColumnSchemaPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnSchemaPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnSchemaPB* New() const final {
    return CreateMaybeMessage<ColumnSchemaPB>(nullptr);
  }

  ColumnSchemaPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnSchemaPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnSchemaPB& from);
  void MergeFrom(const ColumnSchemaPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnSchemaPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.ColumnSchemaPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .demo.ColumnTypePB type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::demo::ColumnTypePB& type() const;
  ::demo::ColumnTypePB* release_type();
  ::demo::ColumnTypePB* mutable_type();
  void set_allocated_type(::demo::ColumnTypePB* type);
  private:
  const ::demo::ColumnTypePB& _internal_type() const;
  ::demo::ColumnTypePB* _internal_mutable_type();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:demo.ColumnSchemaPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::demo::ColumnTypePB* type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TableSchemaPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.TableSchemaPB) */ {
 public:
  TableSchemaPB();
  virtual ~TableSchemaPB();

  TableSchemaPB(const TableSchemaPB& from);
  TableSchemaPB(TableSchemaPB&& from) noexcept
    : TableSchemaPB() {
    *this = ::std::move(from);
  }

  inline TableSchemaPB& operator=(const TableSchemaPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableSchemaPB& operator=(TableSchemaPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableSchemaPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableSchemaPB* internal_default_instance() {
    return reinterpret_cast<const TableSchemaPB*>(
               &_TableSchemaPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TableSchemaPB& a, TableSchemaPB& b) {
    a.Swap(&b);
  }
  inline void Swap(TableSchemaPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableSchemaPB* New() const final {
    return CreateMaybeMessage<TableSchemaPB>(nullptr);
  }

  TableSchemaPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableSchemaPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableSchemaPB& from);
  void MergeFrom(const TableSchemaPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableSchemaPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.TableSchemaPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kColumnsFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .demo.ColumnSchemaPB columns = 3;
  bool has_columns() const;
  private:
  bool _internal_has_columns() const;
  public:
  void clear_columns();
  const ::demo::ColumnSchemaPB& columns() const;
  ::demo::ColumnSchemaPB* release_columns();
  ::demo::ColumnSchemaPB* mutable_columns();
  void set_allocated_columns(::demo::ColumnSchemaPB* columns);
  private:
  const ::demo::ColumnSchemaPB& _internal_columns() const;
  ::demo::ColumnSchemaPB* _internal_mutable_columns();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:demo.TableSchemaPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::demo::ColumnSchemaPB* columns_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CreateTableRequestPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.CreateTableRequestPB) */ {
 public:
  CreateTableRequestPB();
  virtual ~CreateTableRequestPB();

  CreateTableRequestPB(const CreateTableRequestPB& from);
  CreateTableRequestPB(CreateTableRequestPB&& from) noexcept
    : CreateTableRequestPB() {
    *this = ::std::move(from);
  }

  inline CreateTableRequestPB& operator=(const CreateTableRequestPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableRequestPB& operator=(CreateTableRequestPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableRequestPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableRequestPB* internal_default_instance() {
    return reinterpret_cast<const CreateTableRequestPB*>(
               &_CreateTableRequestPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateTableRequestPB& a, CreateTableRequestPB& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTableRequestPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTableRequestPB* New() const final {
    return CreateMaybeMessage<CreateTableRequestPB>(nullptr);
  }

  CreateTableRequestPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableRequestPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableRequestPB& from);
  void MergeFrom(const CreateTableRequestPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableRequestPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.CreateTableRequestPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // .demo.TableSchemaPB schema = 2;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::demo::TableSchemaPB& schema() const;
  ::demo::TableSchemaPB* release_schema();
  ::demo::TableSchemaPB* mutable_schema();
  void set_allocated_schema(::demo::TableSchemaPB* schema);
  private:
  const ::demo::TableSchemaPB& _internal_schema() const;
  ::demo::TableSchemaPB* _internal_mutable_schema();
  public:

  // uint64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:demo.CreateTableRequestPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::demo::TableSchemaPB* schema_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CreateTableResponsePB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.CreateTableResponsePB) */ {
 public:
  CreateTableResponsePB();
  virtual ~CreateTableResponsePB();

  CreateTableResponsePB(const CreateTableResponsePB& from);
  CreateTableResponsePB(CreateTableResponsePB&& from) noexcept
    : CreateTableResponsePB() {
    *this = ::std::move(from);
  }

  inline CreateTableResponsePB& operator=(const CreateTableResponsePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableResponsePB& operator=(CreateTableResponsePB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableResponsePB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableResponsePB* internal_default_instance() {
    return reinterpret_cast<const CreateTableResponsePB*>(
               &_CreateTableResponsePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateTableResponsePB& a, CreateTableResponsePB& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTableResponsePB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTableResponsePB* New() const final {
    return CreateMaybeMessage<CreateTableResponsePB>(nullptr);
  }

  CreateTableResponsePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableResponsePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableResponsePB& from);
  void MergeFrom(const CreateTableResponsePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableResponsePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.CreateTableResponsePB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kSchemaFieldNumber = 2,
  };
  // .demo.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::demo::Status& status() const;
  ::demo::Status* release_status();
  ::demo::Status* mutable_status();
  void set_allocated_status(::demo::Status* status);
  private:
  const ::demo::Status& _internal_status() const;
  ::demo::Status* _internal_mutable_status();
  public:

  // .demo.TableSchemaPB schema = 2;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::demo::TableSchemaPB& schema() const;
  ::demo::TableSchemaPB* release_schema();
  ::demo::TableSchemaPB* mutable_schema();
  void set_allocated_schema(::demo::TableSchemaPB* schema);
  private:
  const ::demo::TableSchemaPB& _internal_schema() const;
  ::demo::TableSchemaPB* _internal_mutable_schema();
  public:

  // @@protoc_insertion_point(class_scope:demo.CreateTableResponsePB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::demo::Status* status_;
  ::demo::TableSchemaPB* schema_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VectorColumnInfoPB

// int64 dimension = 1;
inline void VectorColumnInfoPB::clear_dimension() {
  dimension_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VectorColumnInfoPB::_internal_dimension() const {
  return dimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VectorColumnInfoPB::dimension() const {
  // @@protoc_insertion_point(field_get:demo.VectorColumnInfoPB.dimension)
  return _internal_dimension();
}
inline void VectorColumnInfoPB::_internal_set_dimension(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dimension_ = value;
}
inline void VectorColumnInfoPB::set_dimension(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dimension(value);
  // @@protoc_insertion_point(field_set:demo.VectorColumnInfoPB.dimension)
}

// .demo.DataType element_type = 2;
inline void VectorColumnInfoPB::clear_element_type() {
  element_type_ = 0;
}
inline ::demo::DataType VectorColumnInfoPB::_internal_element_type() const {
  return static_cast< ::demo::DataType >(element_type_);
}
inline ::demo::DataType VectorColumnInfoPB::element_type() const {
  // @@protoc_insertion_point(field_get:demo.VectorColumnInfoPB.element_type)
  return _internal_element_type();
}
inline void VectorColumnInfoPB::_internal_set_element_type(::demo::DataType value) {
  
  element_type_ = value;
}
inline void VectorColumnInfoPB::set_element_type(::demo::DataType value) {
  _internal_set_element_type(value);
  // @@protoc_insertion_point(field_set:demo.VectorColumnInfoPB.element_type)
}

// -------------------------------------------------------------------

// ColumnTypePB

// .demo.DataType type = 1;
inline void ColumnTypePB::clear_type() {
  type_ = 0;
}
inline ::demo::DataType ColumnTypePB::_internal_type() const {
  return static_cast< ::demo::DataType >(type_);
}
inline ::demo::DataType ColumnTypePB::type() const {
  // @@protoc_insertion_point(field_get:demo.ColumnTypePB.type)
  return _internal_type();
}
inline void ColumnTypePB::_internal_set_type(::demo::DataType value) {
  
  type_ = value;
}
inline void ColumnTypePB::set_type(::demo::DataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:demo.ColumnTypePB.type)
}

// .demo.VectorColumnInfoPB info = 2;
inline bool ColumnTypePB::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ColumnTypePB::has_info() const {
  return _internal_has_info();
}
inline void ColumnTypePB::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::demo::VectorColumnInfoPB& ColumnTypePB::_internal_info() const {
  const ::demo::VectorColumnInfoPB* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::VectorColumnInfoPB*>(
      &::demo::_VectorColumnInfoPB_default_instance_);
}
inline const ::demo::VectorColumnInfoPB& ColumnTypePB::info() const {
  // @@protoc_insertion_point(field_get:demo.ColumnTypePB.info)
  return _internal_info();
}
inline ::demo::VectorColumnInfoPB* ColumnTypePB::release_info() {
  // @@protoc_insertion_point(field_release:demo.ColumnTypePB.info)
  
  ::demo::VectorColumnInfoPB* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::demo::VectorColumnInfoPB* ColumnTypePB::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::VectorColumnInfoPB>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::demo::VectorColumnInfoPB* ColumnTypePB::mutable_info() {
  // @@protoc_insertion_point(field_mutable:demo.ColumnTypePB.info)
  return _internal_mutable_info();
}
inline void ColumnTypePB::set_allocated_info(::demo::VectorColumnInfoPB* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:demo.ColumnTypePB.info)
}

// -------------------------------------------------------------------

// ColumnSchemaPB

// uint64 id = 1;
inline void ColumnSchemaPB::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ColumnSchemaPB::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ColumnSchemaPB::id() const {
  // @@protoc_insertion_point(field_get:demo.ColumnSchemaPB.id)
  return _internal_id();
}
inline void ColumnSchemaPB::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void ColumnSchemaPB::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:demo.ColumnSchemaPB.id)
}

// string name = 2;
inline void ColumnSchemaPB::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ColumnSchemaPB::name() const {
  // @@protoc_insertion_point(field_get:demo.ColumnSchemaPB.name)
  return _internal_name();
}
inline void ColumnSchemaPB::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:demo.ColumnSchemaPB.name)
}
inline std::string* ColumnSchemaPB::mutable_name() {
  // @@protoc_insertion_point(field_mutable:demo.ColumnSchemaPB.name)
  return _internal_mutable_name();
}
inline const std::string& ColumnSchemaPB::_internal_name() const {
  return name_.GetNoArena();
}
inline void ColumnSchemaPB::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ColumnSchemaPB::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.ColumnSchemaPB.name)
}
inline void ColumnSchemaPB::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.ColumnSchemaPB.name)
}
inline void ColumnSchemaPB::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.ColumnSchemaPB.name)
}
inline std::string* ColumnSchemaPB::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ColumnSchemaPB::release_name() {
  // @@protoc_insertion_point(field_release:demo.ColumnSchemaPB.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnSchemaPB::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:demo.ColumnSchemaPB.name)
}

// .demo.ColumnTypePB type = 3;
inline bool ColumnSchemaPB::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool ColumnSchemaPB::has_type() const {
  return _internal_has_type();
}
inline void ColumnSchemaPB::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::demo::ColumnTypePB& ColumnSchemaPB::_internal_type() const {
  const ::demo::ColumnTypePB* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::ColumnTypePB*>(
      &::demo::_ColumnTypePB_default_instance_);
}
inline const ::demo::ColumnTypePB& ColumnSchemaPB::type() const {
  // @@protoc_insertion_point(field_get:demo.ColumnSchemaPB.type)
  return _internal_type();
}
inline ::demo::ColumnTypePB* ColumnSchemaPB::release_type() {
  // @@protoc_insertion_point(field_release:demo.ColumnSchemaPB.type)
  
  ::demo::ColumnTypePB* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::demo::ColumnTypePB* ColumnSchemaPB::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::ColumnTypePB>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::demo::ColumnTypePB* ColumnSchemaPB::mutable_type() {
  // @@protoc_insertion_point(field_mutable:demo.ColumnSchemaPB.type)
  return _internal_mutable_type();
}
inline void ColumnSchemaPB::set_allocated_type(::demo::ColumnTypePB* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:demo.ColumnSchemaPB.type)
}

// -------------------------------------------------------------------

// TableSchemaPB

// uint64 id = 1;
inline void TableSchemaPB::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TableSchemaPB::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TableSchemaPB::id() const {
  // @@protoc_insertion_point(field_get:demo.TableSchemaPB.id)
  return _internal_id();
}
inline void TableSchemaPB::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void TableSchemaPB::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:demo.TableSchemaPB.id)
}

// string name = 2;
inline void TableSchemaPB::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TableSchemaPB::name() const {
  // @@protoc_insertion_point(field_get:demo.TableSchemaPB.name)
  return _internal_name();
}
inline void TableSchemaPB::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:demo.TableSchemaPB.name)
}
inline std::string* TableSchemaPB::mutable_name() {
  // @@protoc_insertion_point(field_mutable:demo.TableSchemaPB.name)
  return _internal_mutable_name();
}
inline const std::string& TableSchemaPB::_internal_name() const {
  return name_.GetNoArena();
}
inline void TableSchemaPB::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TableSchemaPB::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.TableSchemaPB.name)
}
inline void TableSchemaPB::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.TableSchemaPB.name)
}
inline void TableSchemaPB::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.TableSchemaPB.name)
}
inline std::string* TableSchemaPB::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TableSchemaPB::release_name() {
  // @@protoc_insertion_point(field_release:demo.TableSchemaPB.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TableSchemaPB::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:demo.TableSchemaPB.name)
}

// .demo.ColumnSchemaPB columns = 3;
inline bool TableSchemaPB::_internal_has_columns() const {
  return this != internal_default_instance() && columns_ != nullptr;
}
inline bool TableSchemaPB::has_columns() const {
  return _internal_has_columns();
}
inline void TableSchemaPB::clear_columns() {
  if (GetArenaNoVirtual() == nullptr && columns_ != nullptr) {
    delete columns_;
  }
  columns_ = nullptr;
}
inline const ::demo::ColumnSchemaPB& TableSchemaPB::_internal_columns() const {
  const ::demo::ColumnSchemaPB* p = columns_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::ColumnSchemaPB*>(
      &::demo::_ColumnSchemaPB_default_instance_);
}
inline const ::demo::ColumnSchemaPB& TableSchemaPB::columns() const {
  // @@protoc_insertion_point(field_get:demo.TableSchemaPB.columns)
  return _internal_columns();
}
inline ::demo::ColumnSchemaPB* TableSchemaPB::release_columns() {
  // @@protoc_insertion_point(field_release:demo.TableSchemaPB.columns)
  
  ::demo::ColumnSchemaPB* temp = columns_;
  columns_ = nullptr;
  return temp;
}
inline ::demo::ColumnSchemaPB* TableSchemaPB::_internal_mutable_columns() {
  
  if (columns_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::ColumnSchemaPB>(GetArenaNoVirtual());
    columns_ = p;
  }
  return columns_;
}
inline ::demo::ColumnSchemaPB* TableSchemaPB::mutable_columns() {
  // @@protoc_insertion_point(field_mutable:demo.TableSchemaPB.columns)
  return _internal_mutable_columns();
}
inline void TableSchemaPB::set_allocated_columns(::demo::ColumnSchemaPB* columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete columns_;
  }
  if (columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, columns, submessage_arena);
    }
    
  } else {
    
  }
  columns_ = columns;
  // @@protoc_insertion_point(field_set_allocated:demo.TableSchemaPB.columns)
}

// -------------------------------------------------------------------

// CreateTableRequestPB

// uint64 request_id = 1;
inline void CreateTableRequestPB::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateTableRequestPB::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateTableRequestPB::request_id() const {
  // @@protoc_insertion_point(field_get:demo.CreateTableRequestPB.request_id)
  return _internal_request_id();
}
inline void CreateTableRequestPB::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void CreateTableRequestPB::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:demo.CreateTableRequestPB.request_id)
}

// .demo.TableSchemaPB schema = 2;
inline bool CreateTableRequestPB::_internal_has_schema() const {
  return this != internal_default_instance() && schema_ != nullptr;
}
inline bool CreateTableRequestPB::has_schema() const {
  return _internal_has_schema();
}
inline void CreateTableRequestPB::clear_schema() {
  if (GetArenaNoVirtual() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
}
inline const ::demo::TableSchemaPB& CreateTableRequestPB::_internal_schema() const {
  const ::demo::TableSchemaPB* p = schema_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::TableSchemaPB*>(
      &::demo::_TableSchemaPB_default_instance_);
}
inline const ::demo::TableSchemaPB& CreateTableRequestPB::schema() const {
  // @@protoc_insertion_point(field_get:demo.CreateTableRequestPB.schema)
  return _internal_schema();
}
inline ::demo::TableSchemaPB* CreateTableRequestPB::release_schema() {
  // @@protoc_insertion_point(field_release:demo.CreateTableRequestPB.schema)
  
  ::demo::TableSchemaPB* temp = schema_;
  schema_ = nullptr;
  return temp;
}
inline ::demo::TableSchemaPB* CreateTableRequestPB::_internal_mutable_schema() {
  
  if (schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::TableSchemaPB>(GetArenaNoVirtual());
    schema_ = p;
  }
  return schema_;
}
inline ::demo::TableSchemaPB* CreateTableRequestPB::mutable_schema() {
  // @@protoc_insertion_point(field_mutable:demo.CreateTableRequestPB.schema)
  return _internal_mutable_schema();
}
inline void CreateTableRequestPB::set_allocated_schema(::demo::TableSchemaPB* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete schema_;
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:demo.CreateTableRequestPB.schema)
}

// -------------------------------------------------------------------

// CreateTableResponsePB

// .demo.Status status = 1;
inline bool CreateTableResponsePB::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool CreateTableResponsePB::has_status() const {
  return _internal_has_status();
}
inline const ::demo::Status& CreateTableResponsePB::_internal_status() const {
  const ::demo::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::Status*>(
      &::demo::_Status_default_instance_);
}
inline const ::demo::Status& CreateTableResponsePB::status() const {
  // @@protoc_insertion_point(field_get:demo.CreateTableResponsePB.status)
  return _internal_status();
}
inline ::demo::Status* CreateTableResponsePB::release_status() {
  // @@protoc_insertion_point(field_release:demo.CreateTableResponsePB.status)
  
  ::demo::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::demo::Status* CreateTableResponsePB::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::demo::Status* CreateTableResponsePB::mutable_status() {
  // @@protoc_insertion_point(field_mutable:demo.CreateTableResponsePB.status)
  return _internal_mutable_status();
}
inline void CreateTableResponsePB::set_allocated_status(::demo::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:demo.CreateTableResponsePB.status)
}

// .demo.TableSchemaPB schema = 2;
inline bool CreateTableResponsePB::_internal_has_schema() const {
  return this != internal_default_instance() && schema_ != nullptr;
}
inline bool CreateTableResponsePB::has_schema() const {
  return _internal_has_schema();
}
inline void CreateTableResponsePB::clear_schema() {
  if (GetArenaNoVirtual() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
}
inline const ::demo::TableSchemaPB& CreateTableResponsePB::_internal_schema() const {
  const ::demo::TableSchemaPB* p = schema_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::TableSchemaPB*>(
      &::demo::_TableSchemaPB_default_instance_);
}
inline const ::demo::TableSchemaPB& CreateTableResponsePB::schema() const {
  // @@protoc_insertion_point(field_get:demo.CreateTableResponsePB.schema)
  return _internal_schema();
}
inline ::demo::TableSchemaPB* CreateTableResponsePB::release_schema() {
  // @@protoc_insertion_point(field_release:demo.CreateTableResponsePB.schema)
  
  ::demo::TableSchemaPB* temp = schema_;
  schema_ = nullptr;
  return temp;
}
inline ::demo::TableSchemaPB* CreateTableResponsePB::_internal_mutable_schema() {
  
  if (schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::TableSchemaPB>(GetArenaNoVirtual());
    schema_ = p;
  }
  return schema_;
}
inline ::demo::TableSchemaPB* CreateTableResponsePB::mutable_schema() {
  // @@protoc_insertion_point(field_mutable:demo.CreateTableResponsePB.schema)
  return _internal_mutable_schema();
}
inline void CreateTableResponsePB::set_allocated_schema(::demo::TableSchemaPB* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete schema_;
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:demo.CreateTableResponsePB.schema)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace demo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::demo::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::demo::DataType>() {
  return ::demo::DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
