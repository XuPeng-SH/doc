// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace demo {
class BinaryQueryPB;
class BinaryQueryPBDefaultTypeInternal;
extern BinaryQueryPBDefaultTypeInternal _BinaryQueryPB_default_instance_;
class BinaryVectorValuePB;
class BinaryVectorValuePBDefaultTypeInternal;
extern BinaryVectorValuePBDefaultTypeInternal _BinaryVectorValuePB_default_instance_;
class ColumnSchemaPB;
class ColumnSchemaPBDefaultTypeInternal;
extern ColumnSchemaPBDefaultTypeInternal _ColumnSchemaPB_default_instance_;
class ColumnTypePB;
class ColumnTypePBDefaultTypeInternal;
extern ColumnTypePBDefaultTypeInternal _ColumnTypePB_default_instance_;
class ColumnValuePB;
class ColumnValuePBDefaultTypeInternal;
extern ColumnValuePBDefaultTypeInternal _ColumnValuePB_default_instance_;
class CompareExprPB;
class CompareExprPBDefaultTypeInternal;
extern CompareExprPBDefaultTypeInternal _CompareExprPB_default_instance_;
class CreateTableRequestPB;
class CreateTableRequestPBDefaultTypeInternal;
extern CreateTableRequestPBDefaultTypeInternal _CreateTableRequestPB_default_instance_;
class CreateTableResponsePB;
class CreateTableResponsePBDefaultTypeInternal;
extern CreateTableResponsePBDefaultTypeInternal _CreateTableResponsePB_default_instance_;
class FloatVectorValuePB;
class FloatVectorValuePBDefaultTypeInternal;
extern FloatVectorValuePBDefaultTypeInternal _FloatVectorValuePB_default_instance_;
class GeneralQueryPB;
class GeneralQueryPBDefaultTypeInternal;
extern GeneralQueryPBDefaultTypeInternal _GeneralQueryPB_default_instance_;
class InnerLeafQueryPB;
class InnerLeafQueryPBDefaultTypeInternal;
extern InnerLeafQueryPBDefaultTypeInternal _InnerLeafQueryPB_default_instance_;
class LeafQueryPB;
class LeafQueryPBDefaultTypeInternal;
extern LeafQueryPBDefaultTypeInternal _LeafQueryPB_default_instance_;
class QueryColumnPB;
class QueryColumnPBDefaultTypeInternal;
extern QueryColumnPBDefaultTypeInternal _QueryColumnPB_default_instance_;
class QueryRequestPB;
class QueryRequestPBDefaultTypeInternal;
extern QueryRequestPBDefaultTypeInternal _QueryRequestPB_default_instance_;
class QueryResponsePB;
class QueryResponsePBDefaultTypeInternal;
extern QueryResponsePBDefaultTypeInternal _QueryResponsePB_default_instance_;
class RangeQueryPB;
class RangeQueryPBDefaultTypeInternal;
extern RangeQueryPBDefaultTypeInternal _RangeQueryPB_default_instance_;
class TableSchemaPB;
class TableSchemaPBDefaultTypeInternal;
extern TableSchemaPBDefaultTypeInternal _TableSchemaPB_default_instance_;
class TermQueryPB;
class TermQueryPBDefaultTypeInternal;
extern TermQueryPBDefaultTypeInternal _TermQueryPB_default_instance_;
class VectorColumnInfoPB;
class VectorColumnInfoPBDefaultTypeInternal;
extern VectorColumnInfoPBDefaultTypeInternal _VectorColumnInfoPB_default_instance_;
class VectorColumnValuePB;
class VectorColumnValuePBDefaultTypeInternal;
extern VectorColumnValuePBDefaultTypeInternal _VectorColumnValuePB_default_instance_;
}  // namespace demo
PROTOBUF_NAMESPACE_OPEN
template<> ::demo::BinaryQueryPB* Arena::CreateMaybeMessage<::demo::BinaryQueryPB>(Arena*);
template<> ::demo::BinaryVectorValuePB* Arena::CreateMaybeMessage<::demo::BinaryVectorValuePB>(Arena*);
template<> ::demo::ColumnSchemaPB* Arena::CreateMaybeMessage<::demo::ColumnSchemaPB>(Arena*);
template<> ::demo::ColumnTypePB* Arena::CreateMaybeMessage<::demo::ColumnTypePB>(Arena*);
template<> ::demo::ColumnValuePB* Arena::CreateMaybeMessage<::demo::ColumnValuePB>(Arena*);
template<> ::demo::CompareExprPB* Arena::CreateMaybeMessage<::demo::CompareExprPB>(Arena*);
template<> ::demo::CreateTableRequestPB* Arena::CreateMaybeMessage<::demo::CreateTableRequestPB>(Arena*);
template<> ::demo::CreateTableResponsePB* Arena::CreateMaybeMessage<::demo::CreateTableResponsePB>(Arena*);
template<> ::demo::FloatVectorValuePB* Arena::CreateMaybeMessage<::demo::FloatVectorValuePB>(Arena*);
template<> ::demo::GeneralQueryPB* Arena::CreateMaybeMessage<::demo::GeneralQueryPB>(Arena*);
template<> ::demo::InnerLeafQueryPB* Arena::CreateMaybeMessage<::demo::InnerLeafQueryPB>(Arena*);
template<> ::demo::LeafQueryPB* Arena::CreateMaybeMessage<::demo::LeafQueryPB>(Arena*);
template<> ::demo::QueryColumnPB* Arena::CreateMaybeMessage<::demo::QueryColumnPB>(Arena*);
template<> ::demo::QueryRequestPB* Arena::CreateMaybeMessage<::demo::QueryRequestPB>(Arena*);
template<> ::demo::QueryResponsePB* Arena::CreateMaybeMessage<::demo::QueryResponsePB>(Arena*);
template<> ::demo::RangeQueryPB* Arena::CreateMaybeMessage<::demo::RangeQueryPB>(Arena*);
template<> ::demo::TableSchemaPB* Arena::CreateMaybeMessage<::demo::TableSchemaPB>(Arena*);
template<> ::demo::TermQueryPB* Arena::CreateMaybeMessage<::demo::TermQueryPB>(Arena*);
template<> ::demo::VectorColumnInfoPB* Arena::CreateMaybeMessage<::demo::VectorColumnInfoPB>(Arena*);
template<> ::demo::VectorColumnValuePB* Arena::CreateMaybeMessage<::demo::VectorColumnValuePB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace demo {

enum DataType : int {
  NULL_ = 0,
  INT8 = 1,
  INT16 = 2,
  INT32 = 3,
  INT64 = 4,
  STRING = 20,
  BOOL = 30,
  FLOAT = 40,
  HALFFLOAT = 41,
  DOUBLE = 42,
  VECTOR = 100,
  UNKNOWN = 9999,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = NULL_;
constexpr DataType DataType_MAX = UNKNOWN;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    const std::string& name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum CompareOperator : int {
  LT = 0,
  LTE = 1,
  EQ = 2,
  GT = 3,
  GTE = 4,
  CompareOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CompareOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CompareOperator_IsValid(int value);
constexpr CompareOperator CompareOperator_MIN = LT;
constexpr CompareOperator CompareOperator_MAX = GTE;
constexpr int CompareOperator_ARRAYSIZE = CompareOperator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompareOperator_descriptor();
template<typename T>
inline const std::string& CompareOperator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompareOperator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompareOperator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompareOperator_descriptor(), enum_t_value);
}
inline bool CompareOperator_Parse(
    const std::string& name, CompareOperator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompareOperator>(
    CompareOperator_descriptor(), name, value);
}
enum QueryRelation : int {
  R1 = 0,
  R2 = 1,
  R3 = 2,
  R4 = 3,
  QueryRelation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  QueryRelation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool QueryRelation_IsValid(int value);
constexpr QueryRelation QueryRelation_MIN = R1;
constexpr QueryRelation QueryRelation_MAX = R4;
constexpr int QueryRelation_ARRAYSIZE = QueryRelation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueryRelation_descriptor();
template<typename T>
inline const std::string& QueryRelation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QueryRelation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QueryRelation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QueryRelation_descriptor(), enum_t_value);
}
inline bool QueryRelation_Parse(
    const std::string& name, QueryRelation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QueryRelation>(
    QueryRelation_descriptor(), name, value);
}
// ===================================================================

class VectorColumnInfoPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.VectorColumnInfoPB) */ {
 public:
  VectorColumnInfoPB();
  virtual ~VectorColumnInfoPB();

  VectorColumnInfoPB(const VectorColumnInfoPB& from);
  VectorColumnInfoPB(VectorColumnInfoPB&& from) noexcept
    : VectorColumnInfoPB() {
    *this = ::std::move(from);
  }

  inline VectorColumnInfoPB& operator=(const VectorColumnInfoPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorColumnInfoPB& operator=(VectorColumnInfoPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorColumnInfoPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorColumnInfoPB* internal_default_instance() {
    return reinterpret_cast<const VectorColumnInfoPB*>(
               &_VectorColumnInfoPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VectorColumnInfoPB& a, VectorColumnInfoPB& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorColumnInfoPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorColumnInfoPB* New() const final {
    return CreateMaybeMessage<VectorColumnInfoPB>(nullptr);
  }

  VectorColumnInfoPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorColumnInfoPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorColumnInfoPB& from);
  void MergeFrom(const VectorColumnInfoPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorColumnInfoPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.VectorColumnInfoPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionFieldNumber = 1,
    kElementTypeFieldNumber = 2,
  };
  // int64 dimension = 1;
  void clear_dimension();
  ::PROTOBUF_NAMESPACE_ID::int64 dimension() const;
  void set_dimension(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dimension() const;
  void _internal_set_dimension(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .demo.DataType element_type = 2;
  void clear_element_type();
  ::demo::DataType element_type() const;
  void set_element_type(::demo::DataType value);
  private:
  ::demo::DataType _internal_element_type() const;
  void _internal_set_element_type(::demo::DataType value);
  public:

  // @@protoc_insertion_point(class_scope:demo.VectorColumnInfoPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 dimension_;
  int element_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ColumnTypePB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.ColumnTypePB) */ {
 public:
  ColumnTypePB();
  virtual ~ColumnTypePB();

  ColumnTypePB(const ColumnTypePB& from);
  ColumnTypePB(ColumnTypePB&& from) noexcept
    : ColumnTypePB() {
    *this = ::std::move(from);
  }

  inline ColumnTypePB& operator=(const ColumnTypePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnTypePB& operator=(ColumnTypePB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColumnTypePB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColumnTypePB* internal_default_instance() {
    return reinterpret_cast<const ColumnTypePB*>(
               &_ColumnTypePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ColumnTypePB& a, ColumnTypePB& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnTypePB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnTypePB* New() const final {
    return CreateMaybeMessage<ColumnTypePB>(nullptr);
  }

  ColumnTypePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnTypePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnTypePB& from);
  void MergeFrom(const ColumnTypePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnTypePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.ColumnTypePB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .demo.VectorColumnInfoPB info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::demo::VectorColumnInfoPB& info() const;
  ::demo::VectorColumnInfoPB* release_info();
  ::demo::VectorColumnInfoPB* mutable_info();
  void set_allocated_info(::demo::VectorColumnInfoPB* info);
  private:
  const ::demo::VectorColumnInfoPB& _internal_info() const;
  ::demo::VectorColumnInfoPB* _internal_mutable_info();
  public:

  // .demo.DataType type = 1;
  void clear_type();
  ::demo::DataType type() const;
  void set_type(::demo::DataType value);
  private:
  ::demo::DataType _internal_type() const;
  void _internal_set_type(::demo::DataType value);
  public:

  // @@protoc_insertion_point(class_scope:demo.ColumnTypePB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::demo::VectorColumnInfoPB* info_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ColumnSchemaPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.ColumnSchemaPB) */ {
 public:
  ColumnSchemaPB();
  virtual ~ColumnSchemaPB();

  ColumnSchemaPB(const ColumnSchemaPB& from);
  ColumnSchemaPB(ColumnSchemaPB&& from) noexcept
    : ColumnSchemaPB() {
    *this = ::std::move(from);
  }

  inline ColumnSchemaPB& operator=(const ColumnSchemaPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnSchemaPB& operator=(ColumnSchemaPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColumnSchemaPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColumnSchemaPB* internal_default_instance() {
    return reinterpret_cast<const ColumnSchemaPB*>(
               &_ColumnSchemaPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ColumnSchemaPB& a, ColumnSchemaPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnSchemaPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnSchemaPB* New() const final {
    return CreateMaybeMessage<ColumnSchemaPB>(nullptr);
  }

  ColumnSchemaPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnSchemaPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnSchemaPB& from);
  void MergeFrom(const ColumnSchemaPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnSchemaPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.ColumnSchemaPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .demo.ColumnTypePB type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::demo::ColumnTypePB& type() const;
  ::demo::ColumnTypePB* release_type();
  ::demo::ColumnTypePB* mutable_type();
  void set_allocated_type(::demo::ColumnTypePB* type);
  private:
  const ::demo::ColumnTypePB& _internal_type() const;
  ::demo::ColumnTypePB* _internal_mutable_type();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:demo.ColumnSchemaPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::demo::ColumnTypePB* type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TableSchemaPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.TableSchemaPB) */ {
 public:
  TableSchemaPB();
  virtual ~TableSchemaPB();

  TableSchemaPB(const TableSchemaPB& from);
  TableSchemaPB(TableSchemaPB&& from) noexcept
    : TableSchemaPB() {
    *this = ::std::move(from);
  }

  inline TableSchemaPB& operator=(const TableSchemaPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableSchemaPB& operator=(TableSchemaPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableSchemaPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableSchemaPB* internal_default_instance() {
    return reinterpret_cast<const TableSchemaPB*>(
               &_TableSchemaPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TableSchemaPB& a, TableSchemaPB& b) {
    a.Swap(&b);
  }
  inline void Swap(TableSchemaPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableSchemaPB* New() const final {
    return CreateMaybeMessage<TableSchemaPB>(nullptr);
  }

  TableSchemaPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableSchemaPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableSchemaPB& from);
  void MergeFrom(const TableSchemaPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableSchemaPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.TableSchemaPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 3,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .demo.ColumnSchemaPB columns = 3;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  ::demo::ColumnSchemaPB* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::ColumnSchemaPB >*
      mutable_columns();
  private:
  const ::demo::ColumnSchemaPB& _internal_columns(int index) const;
  ::demo::ColumnSchemaPB* _internal_add_columns();
  public:
  const ::demo::ColumnSchemaPB& columns(int index) const;
  ::demo::ColumnSchemaPB* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::ColumnSchemaPB >&
      columns() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:demo.TableSchemaPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::ColumnSchemaPB > columns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CreateTableRequestPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.CreateTableRequestPB) */ {
 public:
  CreateTableRequestPB();
  virtual ~CreateTableRequestPB();

  CreateTableRequestPB(const CreateTableRequestPB& from);
  CreateTableRequestPB(CreateTableRequestPB&& from) noexcept
    : CreateTableRequestPB() {
    *this = ::std::move(from);
  }

  inline CreateTableRequestPB& operator=(const CreateTableRequestPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableRequestPB& operator=(CreateTableRequestPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableRequestPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableRequestPB* internal_default_instance() {
    return reinterpret_cast<const CreateTableRequestPB*>(
               &_CreateTableRequestPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateTableRequestPB& a, CreateTableRequestPB& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTableRequestPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTableRequestPB* New() const final {
    return CreateMaybeMessage<CreateTableRequestPB>(nullptr);
  }

  CreateTableRequestPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableRequestPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableRequestPB& from);
  void MergeFrom(const CreateTableRequestPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableRequestPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.CreateTableRequestPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // .demo.TableSchemaPB schema = 2;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::demo::TableSchemaPB& schema() const;
  ::demo::TableSchemaPB* release_schema();
  ::demo::TableSchemaPB* mutable_schema();
  void set_allocated_schema(::demo::TableSchemaPB* schema);
  private:
  const ::demo::TableSchemaPB& _internal_schema() const;
  ::demo::TableSchemaPB* _internal_mutable_schema();
  public:

  // uint64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:demo.CreateTableRequestPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::demo::TableSchemaPB* schema_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CreateTableResponsePB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.CreateTableResponsePB) */ {
 public:
  CreateTableResponsePB();
  virtual ~CreateTableResponsePB();

  CreateTableResponsePB(const CreateTableResponsePB& from);
  CreateTableResponsePB(CreateTableResponsePB&& from) noexcept
    : CreateTableResponsePB() {
    *this = ::std::move(from);
  }

  inline CreateTableResponsePB& operator=(const CreateTableResponsePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableResponsePB& operator=(CreateTableResponsePB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableResponsePB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableResponsePB* internal_default_instance() {
    return reinterpret_cast<const CreateTableResponsePB*>(
               &_CreateTableResponsePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateTableResponsePB& a, CreateTableResponsePB& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTableResponsePB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTableResponsePB* New() const final {
    return CreateMaybeMessage<CreateTableResponsePB>(nullptr);
  }

  CreateTableResponsePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableResponsePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableResponsePB& from);
  void MergeFrom(const CreateTableResponsePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableResponsePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.CreateTableResponsePB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kSchemaFieldNumber = 2,
  };
  // .demo.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::demo::Status& status() const;
  ::demo::Status* release_status();
  ::demo::Status* mutable_status();
  void set_allocated_status(::demo::Status* status);
  private:
  const ::demo::Status& _internal_status() const;
  ::demo::Status* _internal_mutable_status();
  public:

  // .demo.TableSchemaPB schema = 2;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::demo::TableSchemaPB& schema() const;
  ::demo::TableSchemaPB* release_schema();
  ::demo::TableSchemaPB* mutable_schema();
  void set_allocated_schema(::demo::TableSchemaPB* schema);
  private:
  const ::demo::TableSchemaPB& _internal_schema() const;
  ::demo::TableSchemaPB* _internal_mutable_schema();
  public:

  // @@protoc_insertion_point(class_scope:demo.CreateTableResponsePB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::demo::Status* status_;
  ::demo::TableSchemaPB* schema_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class BinaryVectorValuePB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.BinaryVectorValuePB) */ {
 public:
  BinaryVectorValuePB();
  virtual ~BinaryVectorValuePB();

  BinaryVectorValuePB(const BinaryVectorValuePB& from);
  BinaryVectorValuePB(BinaryVectorValuePB&& from) noexcept
    : BinaryVectorValuePB() {
    *this = ::std::move(from);
  }

  inline BinaryVectorValuePB& operator=(const BinaryVectorValuePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryVectorValuePB& operator=(BinaryVectorValuePB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BinaryVectorValuePB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinaryVectorValuePB* internal_default_instance() {
    return reinterpret_cast<const BinaryVectorValuePB*>(
               &_BinaryVectorValuePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BinaryVectorValuePB& a, BinaryVectorValuePB& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryVectorValuePB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinaryVectorValuePB* New() const final {
    return CreateMaybeMessage<BinaryVectorValuePB>(nullptr);
  }

  BinaryVectorValuePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinaryVectorValuePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BinaryVectorValuePB& from);
  void MergeFrom(const BinaryVectorValuePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryVectorValuePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.BinaryVectorValuePB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated int32 value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:demo.BinaryVectorValuePB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class FloatVectorValuePB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.FloatVectorValuePB) */ {
 public:
  FloatVectorValuePB();
  virtual ~FloatVectorValuePB();

  FloatVectorValuePB(const FloatVectorValuePB& from);
  FloatVectorValuePB(FloatVectorValuePB&& from) noexcept
    : FloatVectorValuePB() {
    *this = ::std::move(from);
  }

  inline FloatVectorValuePB& operator=(const FloatVectorValuePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatVectorValuePB& operator=(FloatVectorValuePB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatVectorValuePB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatVectorValuePB* internal_default_instance() {
    return reinterpret_cast<const FloatVectorValuePB*>(
               &_FloatVectorValuePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FloatVectorValuePB& a, FloatVectorValuePB& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatVectorValuePB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatVectorValuePB* New() const final {
    return CreateMaybeMessage<FloatVectorValuePB>(nullptr);
  }

  FloatVectorValuePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatVectorValuePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatVectorValuePB& from);
  void MergeFrom(const FloatVectorValuePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatVectorValuePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.FloatVectorValuePB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated float value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:demo.FloatVectorValuePB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class VectorColumnValuePB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.VectorColumnValuePB) */ {
 public:
  VectorColumnValuePB();
  virtual ~VectorColumnValuePB();

  VectorColumnValuePB(const VectorColumnValuePB& from);
  VectorColumnValuePB(VectorColumnValuePB&& from) noexcept
    : VectorColumnValuePB() {
    *this = ::std::move(from);
  }

  inline VectorColumnValuePB& operator=(const VectorColumnValuePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorColumnValuePB& operator=(VectorColumnValuePB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorColumnValuePB& default_instance();

  enum ValueCase {
    kFloatValue = 1,
    kBinaryValue = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorColumnValuePB* internal_default_instance() {
    return reinterpret_cast<const VectorColumnValuePB*>(
               &_VectorColumnValuePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VectorColumnValuePB& a, VectorColumnValuePB& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorColumnValuePB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorColumnValuePB* New() const final {
    return CreateMaybeMessage<VectorColumnValuePB>(nullptr);
  }

  VectorColumnValuePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorColumnValuePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorColumnValuePB& from);
  void MergeFrom(const VectorColumnValuePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorColumnValuePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.VectorColumnValuePB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatValueFieldNumber = 1,
    kBinaryValueFieldNumber = 2,
  };
  // .demo.FloatVectorValuePB float_value = 1;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  const ::demo::FloatVectorValuePB& float_value() const;
  ::demo::FloatVectorValuePB* release_float_value();
  ::demo::FloatVectorValuePB* mutable_float_value();
  void set_allocated_float_value(::demo::FloatVectorValuePB* float_value);
  private:
  const ::demo::FloatVectorValuePB& _internal_float_value() const;
  ::demo::FloatVectorValuePB* _internal_mutable_float_value();
  public:

  // .demo.BinaryVectorValuePB binary_value = 2;
  bool has_binary_value() const;
  private:
  bool _internal_has_binary_value() const;
  public:
  void clear_binary_value();
  const ::demo::BinaryVectorValuePB& binary_value() const;
  ::demo::BinaryVectorValuePB* release_binary_value();
  ::demo::BinaryVectorValuePB* mutable_binary_value();
  void set_allocated_binary_value(::demo::BinaryVectorValuePB* binary_value);
  private:
  const ::demo::BinaryVectorValuePB& _internal_binary_value() const;
  ::demo::BinaryVectorValuePB* _internal_mutable_binary_value();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:demo.VectorColumnValuePB)
 private:
  class _Internal;
  void set_has_float_value();
  void set_has_binary_value();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::demo::FloatVectorValuePB* float_value_;
    ::demo::BinaryVectorValuePB* binary_value_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ColumnValuePB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.ColumnValuePB) */ {
 public:
  ColumnValuePB();
  virtual ~ColumnValuePB();

  ColumnValuePB(const ColumnValuePB& from);
  ColumnValuePB(ColumnValuePB&& from) noexcept
    : ColumnValuePB() {
    *this = ::std::move(from);
  }

  inline ColumnValuePB& operator=(const ColumnValuePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnValuePB& operator=(ColumnValuePB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColumnValuePB& default_instance();

  enum ValueCase {
    kInt8Value = 1,
    kInt16Value = 2,
    kInt32Value = 3,
    kInt64Value = 4,
    kFloatValue = 5,
    kDoubleValue = 6,
    kStringValue = 7,
    kBoolValue = 8,
    kVectorValue = 9,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColumnValuePB* internal_default_instance() {
    return reinterpret_cast<const ColumnValuePB*>(
               &_ColumnValuePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ColumnValuePB& a, ColumnValuePB& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnValuePB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnValuePB* New() const final {
    return CreateMaybeMessage<ColumnValuePB>(nullptr);
  }

  ColumnValuePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnValuePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnValuePB& from);
  void MergeFrom(const ColumnValuePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnValuePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.ColumnValuePB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInt8ValueFieldNumber = 1,
    kInt16ValueFieldNumber = 2,
    kInt32ValueFieldNumber = 3,
    kInt64ValueFieldNumber = 4,
    kFloatValueFieldNumber = 5,
    kDoubleValueFieldNumber = 6,
    kStringValueFieldNumber = 7,
    kBoolValueFieldNumber = 8,
    kVectorValueFieldNumber = 9,
  };
  // int32 int8_value = 1;
  private:
  bool _internal_has_int8_value() const;
  public:
  void clear_int8_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int8_value() const;
  void set_int8_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int8_value() const;
  void _internal_set_int8_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 int16_value = 2;
  private:
  bool _internal_has_int16_value() const;
  public:
  void clear_int16_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int16_value() const;
  void set_int16_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int16_value() const;
  void _internal_set_int16_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 int32_value = 3;
  private:
  bool _internal_has_int32_value() const;
  public:
  void clear_int32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int32_value() const;
  void set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_value() const;
  void _internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 int64_value = 4;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value() const;
  void set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_value() const;
  void _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float float_value = 5;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // double double_value = 6;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // string string_value = 7;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bool bool_value = 8;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // .demo.VectorColumnValuePB vector_value = 9;
  bool has_vector_value() const;
  private:
  bool _internal_has_vector_value() const;
  public:
  void clear_vector_value();
  const ::demo::VectorColumnValuePB& vector_value() const;
  ::demo::VectorColumnValuePB* release_vector_value();
  ::demo::VectorColumnValuePB* mutable_vector_value();
  void set_allocated_vector_value(::demo::VectorColumnValuePB* vector_value);
  private:
  const ::demo::VectorColumnValuePB& _internal_vector_value() const;
  ::demo::VectorColumnValuePB* _internal_mutable_vector_value();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:demo.ColumnValuePB)
 private:
  class _Internal;
  void set_has_int8_value();
  void set_has_int16_value();
  void set_has_int32_value();
  void set_has_int64_value();
  void set_has_float_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_vector_value();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 int8_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 int16_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 int32_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int64_value_;
    float float_value_;
    double double_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    bool bool_value_;
    ::demo::VectorColumnValuePB* vector_value_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class QueryColumnPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.QueryColumnPB) */ {
 public:
  QueryColumnPB();
  virtual ~QueryColumnPB();

  QueryColumnPB(const QueryColumnPB& from);
  QueryColumnPB(QueryColumnPB&& from) noexcept
    : QueryColumnPB() {
    *this = ::std::move(from);
  }

  inline QueryColumnPB& operator=(const QueryColumnPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryColumnPB& operator=(QueryColumnPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryColumnPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryColumnPB* internal_default_instance() {
    return reinterpret_cast<const QueryColumnPB*>(
               &_QueryColumnPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryColumnPB& a, QueryColumnPB& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryColumnPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryColumnPB* New() const final {
    return CreateMaybeMessage<QueryColumnPB>(nullptr);
  }

  QueryColumnPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryColumnPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryColumnPB& from);
  void MergeFrom(const QueryColumnPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryColumnPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.QueryColumnPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .demo.ColumnValuePB value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::demo::ColumnValuePB& value() const;
  ::demo::ColumnValuePB* release_value();
  ::demo::ColumnValuePB* mutable_value();
  void set_allocated_value(::demo::ColumnValuePB* value);
  private:
  const ::demo::ColumnValuePB& _internal_value() const;
  ::demo::ColumnValuePB* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:demo.QueryColumnPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::demo::ColumnValuePB* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TermQueryPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.TermQueryPB) */ {
 public:
  TermQueryPB();
  virtual ~TermQueryPB();

  TermQueryPB(const TermQueryPB& from);
  TermQueryPB(TermQueryPB&& from) noexcept
    : TermQueryPB() {
    *this = ::std::move(from);
  }

  inline TermQueryPB& operator=(const TermQueryPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline TermQueryPB& operator=(TermQueryPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TermQueryPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TermQueryPB* internal_default_instance() {
    return reinterpret_cast<const TermQueryPB*>(
               &_TermQueryPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TermQueryPB& a, TermQueryPB& b) {
    a.Swap(&b);
  }
  inline void Swap(TermQueryPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TermQueryPB* New() const final {
    return CreateMaybeMessage<TermQueryPB>(nullptr);
  }

  TermQueryPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TermQueryPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TermQueryPB& from);
  void MergeFrom(const TermQueryPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TermQueryPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.TermQueryPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kFieldFieldNumber = 1,
  };
  // repeated .demo.ColumnValuePB values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::demo::ColumnValuePB* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::ColumnValuePB >*
      mutable_values();
  private:
  const ::demo::ColumnValuePB& _internal_values(int index) const;
  ::demo::ColumnValuePB* _internal_add_values();
  public:
  const ::demo::ColumnValuePB& values(int index) const;
  ::demo::ColumnValuePB* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::ColumnValuePB >&
      values() const;

  // .demo.QueryColumnPB field = 1;
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  const ::demo::QueryColumnPB& field() const;
  ::demo::QueryColumnPB* release_field();
  ::demo::QueryColumnPB* mutable_field();
  void set_allocated_field(::demo::QueryColumnPB* field);
  private:
  const ::demo::QueryColumnPB& _internal_field() const;
  ::demo::QueryColumnPB* _internal_mutable_field();
  public:

  // @@protoc_insertion_point(class_scope:demo.TermQueryPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::ColumnValuePB > values_;
  ::demo::QueryColumnPB* field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CompareExprPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.CompareExprPB) */ {
 public:
  CompareExprPB();
  virtual ~CompareExprPB();

  CompareExprPB(const CompareExprPB& from);
  CompareExprPB(CompareExprPB&& from) noexcept
    : CompareExprPB() {
    *this = ::std::move(from);
  }

  inline CompareExprPB& operator=(const CompareExprPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompareExprPB& operator=(CompareExprPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompareExprPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompareExprPB* internal_default_instance() {
    return reinterpret_cast<const CompareExprPB*>(
               &_CompareExprPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CompareExprPB& a, CompareExprPB& b) {
    a.Swap(&b);
  }
  inline void Swap(CompareExprPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompareExprPB* New() const final {
    return CreateMaybeMessage<CompareExprPB>(nullptr);
  }

  CompareExprPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompareExprPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompareExprPB& from);
  void MergeFrom(const CompareExprPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompareExprPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.CompareExprPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperandFieldNumber = 2,
    kOperatorFieldNumber = 1,
  };
  // .demo.ColumnValuePB operand = 2;
  bool has_operand() const;
  private:
  bool _internal_has_operand() const;
  public:
  void clear_operand();
  const ::demo::ColumnValuePB& operand() const;
  ::demo::ColumnValuePB* release_operand();
  ::demo::ColumnValuePB* mutable_operand();
  void set_allocated_operand(::demo::ColumnValuePB* operand);
  private:
  const ::demo::ColumnValuePB& _internal_operand() const;
  ::demo::ColumnValuePB* _internal_mutable_operand();
  public:

  // .demo.CompareOperator operator = 1;
  void clear_operator_();
  ::demo::CompareOperator operator_() const;
  void set_operator_(::demo::CompareOperator value);
  private:
  ::demo::CompareOperator _internal_operator_() const;
  void _internal_set_operator_(::demo::CompareOperator value);
  public:

  // @@protoc_insertion_point(class_scope:demo.CompareExprPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::demo::ColumnValuePB* operand_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RangeQueryPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.RangeQueryPB) */ {
 public:
  RangeQueryPB();
  virtual ~RangeQueryPB();

  RangeQueryPB(const RangeQueryPB& from);
  RangeQueryPB(RangeQueryPB&& from) noexcept
    : RangeQueryPB() {
    *this = ::std::move(from);
  }

  inline RangeQueryPB& operator=(const RangeQueryPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeQueryPB& operator=(RangeQueryPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RangeQueryPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeQueryPB* internal_default_instance() {
    return reinterpret_cast<const RangeQueryPB*>(
               &_RangeQueryPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RangeQueryPB& a, RangeQueryPB& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeQueryPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeQueryPB* New() const final {
    return CreateMaybeMessage<RangeQueryPB>(nullptr);
  }

  RangeQueryPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeQueryPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeQueryPB& from);
  void MergeFrom(const RangeQueryPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeQueryPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.RangeQueryPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperandFieldNumber = 2,
    kFieldFieldNumber = 1,
  };
  // repeated .demo.CompareExprPB operand = 2;
  int operand_size() const;
  private:
  int _internal_operand_size() const;
  public:
  void clear_operand();
  ::demo::CompareExprPB* mutable_operand(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::CompareExprPB >*
      mutable_operand();
  private:
  const ::demo::CompareExprPB& _internal_operand(int index) const;
  ::demo::CompareExprPB* _internal_add_operand();
  public:
  const ::demo::CompareExprPB& operand(int index) const;
  ::demo::CompareExprPB* add_operand();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::CompareExprPB >&
      operand() const;

  // .demo.QueryColumnPB field = 1;
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  const ::demo::QueryColumnPB& field() const;
  ::demo::QueryColumnPB* release_field();
  ::demo::QueryColumnPB* mutable_field();
  void set_allocated_field(::demo::QueryColumnPB* field);
  private:
  const ::demo::QueryColumnPB& _internal_field() const;
  ::demo::QueryColumnPB* _internal_mutable_field();
  public:

  // @@protoc_insertion_point(class_scope:demo.RangeQueryPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::CompareExprPB > operand_;
  ::demo::QueryColumnPB* field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class InnerLeafQueryPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.InnerLeafQueryPB) */ {
 public:
  InnerLeafQueryPB();
  virtual ~InnerLeafQueryPB();

  InnerLeafQueryPB(const InnerLeafQueryPB& from);
  InnerLeafQueryPB(InnerLeafQueryPB&& from) noexcept
    : InnerLeafQueryPB() {
    *this = ::std::move(from);
  }

  inline InnerLeafQueryPB& operator=(const InnerLeafQueryPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerLeafQueryPB& operator=(InnerLeafQueryPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InnerLeafQueryPB& default_instance();

  enum QueryCase {
    kTermQuery = 1,
    kRangeQuery = 2,
    QUERY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InnerLeafQueryPB* internal_default_instance() {
    return reinterpret_cast<const InnerLeafQueryPB*>(
               &_InnerLeafQueryPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(InnerLeafQueryPB& a, InnerLeafQueryPB& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerLeafQueryPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InnerLeafQueryPB* New() const final {
    return CreateMaybeMessage<InnerLeafQueryPB>(nullptr);
  }

  InnerLeafQueryPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InnerLeafQueryPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InnerLeafQueryPB& from);
  void MergeFrom(const InnerLeafQueryPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerLeafQueryPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.InnerLeafQueryPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermQueryFieldNumber = 1,
    kRangeQueryFieldNumber = 2,
  };
  // .demo.TermQueryPB term_query = 1;
  bool has_term_query() const;
  private:
  bool _internal_has_term_query() const;
  public:
  void clear_term_query();
  const ::demo::TermQueryPB& term_query() const;
  ::demo::TermQueryPB* release_term_query();
  ::demo::TermQueryPB* mutable_term_query();
  void set_allocated_term_query(::demo::TermQueryPB* term_query);
  private:
  const ::demo::TermQueryPB& _internal_term_query() const;
  ::demo::TermQueryPB* _internal_mutable_term_query();
  public:

  // .demo.RangeQueryPB range_query = 2;
  bool has_range_query() const;
  private:
  bool _internal_has_range_query() const;
  public:
  void clear_range_query();
  const ::demo::RangeQueryPB& range_query() const;
  ::demo::RangeQueryPB* release_range_query();
  ::demo::RangeQueryPB* mutable_range_query();
  void set_allocated_range_query(::demo::RangeQueryPB* range_query);
  private:
  const ::demo::RangeQueryPB& _internal_range_query() const;
  ::demo::RangeQueryPB* _internal_mutable_range_query();
  public:

  void clear_query();
  QueryCase query_case() const;
  // @@protoc_insertion_point(class_scope:demo.InnerLeafQueryPB)
 private:
  class _Internal;
  void set_has_term_query();
  void set_has_range_query();

  inline bool has_query() const;
  inline void clear_has_query();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union QueryUnion {
    QueryUnion() {}
    ::demo::TermQueryPB* term_query_;
    ::demo::RangeQueryPB* range_query_;
  } query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class LeafQueryPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.LeafQueryPB) */ {
 public:
  LeafQueryPB();
  virtual ~LeafQueryPB();

  LeafQueryPB(const LeafQueryPB& from);
  LeafQueryPB(LeafQueryPB&& from) noexcept
    : LeafQueryPB() {
    *this = ::std::move(from);
  }

  inline LeafQueryPB& operator=(const LeafQueryPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeafQueryPB& operator=(LeafQueryPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeafQueryPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeafQueryPB* internal_default_instance() {
    return reinterpret_cast<const LeafQueryPB*>(
               &_LeafQueryPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(LeafQueryPB& a, LeafQueryPB& b) {
    a.Swap(&b);
  }
  inline void Swap(LeafQueryPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeafQueryPB* New() const final {
    return CreateMaybeMessage<LeafQueryPB>(nullptr);
  }

  LeafQueryPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeafQueryPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeafQueryPB& from);
  void MergeFrom(const LeafQueryPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeafQueryPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.LeafQueryPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kBoostFieldNumber = 2,
  };
  // .demo.InnerLeafQueryPB query = 1;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::demo::InnerLeafQueryPB& query() const;
  ::demo::InnerLeafQueryPB* release_query();
  ::demo::InnerLeafQueryPB* mutable_query();
  void set_allocated_query(::demo::InnerLeafQueryPB* query);
  private:
  const ::demo::InnerLeafQueryPB& _internal_query() const;
  ::demo::InnerLeafQueryPB* _internal_mutable_query();
  public:

  // float boost = 2;
  void clear_boost();
  float boost() const;
  void set_boost(float value);
  private:
  float _internal_boost() const;
  void _internal_set_boost(float value);
  public:

  // @@protoc_insertion_point(class_scope:demo.LeafQueryPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::demo::InnerLeafQueryPB* query_;
  float boost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class GeneralQueryPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.GeneralQueryPB) */ {
 public:
  GeneralQueryPB();
  virtual ~GeneralQueryPB();

  GeneralQueryPB(const GeneralQueryPB& from);
  GeneralQueryPB(GeneralQueryPB&& from) noexcept
    : GeneralQueryPB() {
    *this = ::std::move(from);
  }

  inline GeneralQueryPB& operator=(const GeneralQueryPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneralQueryPB& operator=(GeneralQueryPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeneralQueryPB& default_instance();

  enum QueryCase {
    kLeaf = 1,
    kBin = 2,
    QUERY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneralQueryPB* internal_default_instance() {
    return reinterpret_cast<const GeneralQueryPB*>(
               &_GeneralQueryPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GeneralQueryPB& a, GeneralQueryPB& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneralQueryPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeneralQueryPB* New() const final {
    return CreateMaybeMessage<GeneralQueryPB>(nullptr);
  }

  GeneralQueryPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneralQueryPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeneralQueryPB& from);
  void MergeFrom(const GeneralQueryPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneralQueryPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.GeneralQueryPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeafFieldNumber = 1,
    kBinFieldNumber = 2,
  };
  // .demo.LeafQueryPB leaf = 1;
  bool has_leaf() const;
  private:
  bool _internal_has_leaf() const;
  public:
  void clear_leaf();
  const ::demo::LeafQueryPB& leaf() const;
  ::demo::LeafQueryPB* release_leaf();
  ::demo::LeafQueryPB* mutable_leaf();
  void set_allocated_leaf(::demo::LeafQueryPB* leaf);
  private:
  const ::demo::LeafQueryPB& _internal_leaf() const;
  ::demo::LeafQueryPB* _internal_mutable_leaf();
  public:

  // .demo.BinaryQueryPB bin = 2;
  bool has_bin() const;
  private:
  bool _internal_has_bin() const;
  public:
  void clear_bin();
  const ::demo::BinaryQueryPB& bin() const;
  ::demo::BinaryQueryPB* release_bin();
  ::demo::BinaryQueryPB* mutable_bin();
  void set_allocated_bin(::demo::BinaryQueryPB* bin);
  private:
  const ::demo::BinaryQueryPB& _internal_bin() const;
  ::demo::BinaryQueryPB* _internal_mutable_bin();
  public:

  void clear_query();
  QueryCase query_case() const;
  // @@protoc_insertion_point(class_scope:demo.GeneralQueryPB)
 private:
  class _Internal;
  void set_has_leaf();
  void set_has_bin();

  inline bool has_query() const;
  inline void clear_has_query();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union QueryUnion {
    QueryUnion() {}
    ::demo::LeafQueryPB* leaf_;
    ::demo::BinaryQueryPB* bin_;
  } query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class BinaryQueryPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.BinaryQueryPB) */ {
 public:
  BinaryQueryPB();
  virtual ~BinaryQueryPB();

  BinaryQueryPB(const BinaryQueryPB& from);
  BinaryQueryPB(BinaryQueryPB&& from) noexcept
    : BinaryQueryPB() {
    *this = ::std::move(from);
  }

  inline BinaryQueryPB& operator=(const BinaryQueryPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryQueryPB& operator=(BinaryQueryPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BinaryQueryPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinaryQueryPB* internal_default_instance() {
    return reinterpret_cast<const BinaryQueryPB*>(
               &_BinaryQueryPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(BinaryQueryPB& a, BinaryQueryPB& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryQueryPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinaryQueryPB* New() const final {
    return CreateMaybeMessage<BinaryQueryPB>(nullptr);
  }

  BinaryQueryPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinaryQueryPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BinaryQueryPB& from);
  void MergeFrom(const BinaryQueryPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryQueryPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.BinaryQueryPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftQueryFieldNumber = 1,
    kRightQueryFieldNumber = 2,
    kRelationFieldNumber = 3,
    kBoostFieldNumber = 4,
  };
  // .demo.GeneralQueryPB left_query = 1;
  bool has_left_query() const;
  private:
  bool _internal_has_left_query() const;
  public:
  void clear_left_query();
  const ::demo::GeneralQueryPB& left_query() const;
  ::demo::GeneralQueryPB* release_left_query();
  ::demo::GeneralQueryPB* mutable_left_query();
  void set_allocated_left_query(::demo::GeneralQueryPB* left_query);
  private:
  const ::demo::GeneralQueryPB& _internal_left_query() const;
  ::demo::GeneralQueryPB* _internal_mutable_left_query();
  public:

  // .demo.GeneralQueryPB right_query = 2;
  bool has_right_query() const;
  private:
  bool _internal_has_right_query() const;
  public:
  void clear_right_query();
  const ::demo::GeneralQueryPB& right_query() const;
  ::demo::GeneralQueryPB* release_right_query();
  ::demo::GeneralQueryPB* mutable_right_query();
  void set_allocated_right_query(::demo::GeneralQueryPB* right_query);
  private:
  const ::demo::GeneralQueryPB& _internal_right_query() const;
  ::demo::GeneralQueryPB* _internal_mutable_right_query();
  public:

  // .demo.QueryRelation relation = 3;
  void clear_relation();
  ::demo::QueryRelation relation() const;
  void set_relation(::demo::QueryRelation value);
  private:
  ::demo::QueryRelation _internal_relation() const;
  void _internal_set_relation(::demo::QueryRelation value);
  public:

  // float boost = 4;
  void clear_boost();
  float boost() const;
  void set_boost(float value);
  private:
  float _internal_boost() const;
  void _internal_set_boost(float value);
  public:

  // @@protoc_insertion_point(class_scope:demo.BinaryQueryPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::demo::GeneralQueryPB* left_query_;
  ::demo::GeneralQueryPB* right_query_;
  int relation_;
  float boost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class QueryRequestPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.QueryRequestPB) */ {
 public:
  QueryRequestPB();
  virtual ~QueryRequestPB();

  QueryRequestPB(const QueryRequestPB& from);
  QueryRequestPB(QueryRequestPB&& from) noexcept
    : QueryRequestPB() {
    *this = ::std::move(from);
  }

  inline QueryRequestPB& operator=(const QueryRequestPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRequestPB& operator=(QueryRequestPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRequestPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRequestPB* internal_default_instance() {
    return reinterpret_cast<const QueryRequestPB*>(
               &_QueryRequestPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(QueryRequestPB& a, QueryRequestPB& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRequestPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRequestPB* New() const final {
    return CreateMaybeMessage<QueryRequestPB>(nullptr);
  }

  QueryRequestPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRequestPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRequestPB& from);
  void MergeFrom(const QueryRequestPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequestPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.QueryRequestPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // .demo.GeneralQueryPB query = 2;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::demo::GeneralQueryPB& query() const;
  ::demo::GeneralQueryPB* release_query();
  ::demo::GeneralQueryPB* mutable_query();
  void set_allocated_query(::demo::GeneralQueryPB* query);
  private:
  const ::demo::GeneralQueryPB& _internal_query() const;
  ::demo::GeneralQueryPB* _internal_mutable_query();
  public:

  // uint64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:demo.QueryRequestPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::demo::GeneralQueryPB* query_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class QueryResponsePB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.QueryResponsePB) */ {
 public:
  QueryResponsePB();
  virtual ~QueryResponsePB();

  QueryResponsePB(const QueryResponsePB& from);
  QueryResponsePB(QueryResponsePB&& from) noexcept
    : QueryResponsePB() {
    *this = ::std::move(from);
  }

  inline QueryResponsePB& operator=(const QueryResponsePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponsePB& operator=(QueryResponsePB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponsePB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponsePB* internal_default_instance() {
    return reinterpret_cast<const QueryResponsePB*>(
               &_QueryResponsePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(QueryResponsePB& a, QueryResponsePB& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponsePB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResponsePB* New() const final {
    return CreateMaybeMessage<QueryResponsePB>(nullptr);
  }

  QueryResponsePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponsePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponsePB& from);
  void MergeFrom(const QueryResponsePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponsePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.QueryResponsePB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 3,
    kScoreFieldNumber = 4,
    kDistanceFieldNumber = 5,
    kStatusFieldNumber = 1,
    kHitsFieldNumber = 2,
  };
  // repeated int64 ids = 3;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_ids() const;
  void _internal_add_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_ids();

  // repeated float score = 4;
  int score_size() const;
  private:
  int _internal_score_size() const;
  public:
  void clear_score();
  private:
  float _internal_score(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_score() const;
  void _internal_add_score(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_score();
  public:
  float score(int index) const;
  void set_score(int index, float value);
  void add_score(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_score();

  // repeated float distance = 5;
  int distance_size() const;
  private:
  int _internal_distance_size() const;
  public:
  void clear_distance();
  private:
  float _internal_distance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_distance() const;
  void _internal_add_distance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_distance();
  public:
  float distance(int index) const;
  void set_distance(int index, float value);
  void add_distance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      distance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_distance();

  // .demo.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::demo::Status& status() const;
  ::demo::Status* release_status();
  ::demo::Status* mutable_status();
  void set_allocated_status(::demo::Status* status);
  private:
  const ::demo::Status& _internal_status() const;
  ::demo::Status* _internal_mutable_status();
  public:

  // uint64 hits = 2;
  void clear_hits();
  ::PROTOBUF_NAMESPACE_ID::uint64 hits() const;
  void set_hits(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hits() const;
  void _internal_set_hits(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:demo.QueryResponsePB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > score_;
  mutable std::atomic<int> _score_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > distance_;
  mutable std::atomic<int> _distance_cached_byte_size_;
  ::demo::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VectorColumnInfoPB

// int64 dimension = 1;
inline void VectorColumnInfoPB::clear_dimension() {
  dimension_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VectorColumnInfoPB::_internal_dimension() const {
  return dimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VectorColumnInfoPB::dimension() const {
  // @@protoc_insertion_point(field_get:demo.VectorColumnInfoPB.dimension)
  return _internal_dimension();
}
inline void VectorColumnInfoPB::_internal_set_dimension(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dimension_ = value;
}
inline void VectorColumnInfoPB::set_dimension(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dimension(value);
  // @@protoc_insertion_point(field_set:demo.VectorColumnInfoPB.dimension)
}

// .demo.DataType element_type = 2;
inline void VectorColumnInfoPB::clear_element_type() {
  element_type_ = 0;
}
inline ::demo::DataType VectorColumnInfoPB::_internal_element_type() const {
  return static_cast< ::demo::DataType >(element_type_);
}
inline ::demo::DataType VectorColumnInfoPB::element_type() const {
  // @@protoc_insertion_point(field_get:demo.VectorColumnInfoPB.element_type)
  return _internal_element_type();
}
inline void VectorColumnInfoPB::_internal_set_element_type(::demo::DataType value) {
  
  element_type_ = value;
}
inline void VectorColumnInfoPB::set_element_type(::demo::DataType value) {
  _internal_set_element_type(value);
  // @@protoc_insertion_point(field_set:demo.VectorColumnInfoPB.element_type)
}

// -------------------------------------------------------------------

// ColumnTypePB

// .demo.DataType type = 1;
inline void ColumnTypePB::clear_type() {
  type_ = 0;
}
inline ::demo::DataType ColumnTypePB::_internal_type() const {
  return static_cast< ::demo::DataType >(type_);
}
inline ::demo::DataType ColumnTypePB::type() const {
  // @@protoc_insertion_point(field_get:demo.ColumnTypePB.type)
  return _internal_type();
}
inline void ColumnTypePB::_internal_set_type(::demo::DataType value) {
  
  type_ = value;
}
inline void ColumnTypePB::set_type(::demo::DataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:demo.ColumnTypePB.type)
}

// .demo.VectorColumnInfoPB info = 2;
inline bool ColumnTypePB::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ColumnTypePB::has_info() const {
  return _internal_has_info();
}
inline void ColumnTypePB::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::demo::VectorColumnInfoPB& ColumnTypePB::_internal_info() const {
  const ::demo::VectorColumnInfoPB* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::VectorColumnInfoPB*>(
      &::demo::_VectorColumnInfoPB_default_instance_);
}
inline const ::demo::VectorColumnInfoPB& ColumnTypePB::info() const {
  // @@protoc_insertion_point(field_get:demo.ColumnTypePB.info)
  return _internal_info();
}
inline ::demo::VectorColumnInfoPB* ColumnTypePB::release_info() {
  // @@protoc_insertion_point(field_release:demo.ColumnTypePB.info)
  
  ::demo::VectorColumnInfoPB* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::demo::VectorColumnInfoPB* ColumnTypePB::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::VectorColumnInfoPB>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::demo::VectorColumnInfoPB* ColumnTypePB::mutable_info() {
  // @@protoc_insertion_point(field_mutable:demo.ColumnTypePB.info)
  return _internal_mutable_info();
}
inline void ColumnTypePB::set_allocated_info(::demo::VectorColumnInfoPB* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:demo.ColumnTypePB.info)
}

// -------------------------------------------------------------------

// ColumnSchemaPB

// uint64 id = 1;
inline void ColumnSchemaPB::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ColumnSchemaPB::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ColumnSchemaPB::id() const {
  // @@protoc_insertion_point(field_get:demo.ColumnSchemaPB.id)
  return _internal_id();
}
inline void ColumnSchemaPB::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void ColumnSchemaPB::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:demo.ColumnSchemaPB.id)
}

// string name = 2;
inline void ColumnSchemaPB::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ColumnSchemaPB::name() const {
  // @@protoc_insertion_point(field_get:demo.ColumnSchemaPB.name)
  return _internal_name();
}
inline void ColumnSchemaPB::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:demo.ColumnSchemaPB.name)
}
inline std::string* ColumnSchemaPB::mutable_name() {
  // @@protoc_insertion_point(field_mutable:demo.ColumnSchemaPB.name)
  return _internal_mutable_name();
}
inline const std::string& ColumnSchemaPB::_internal_name() const {
  return name_.GetNoArena();
}
inline void ColumnSchemaPB::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ColumnSchemaPB::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.ColumnSchemaPB.name)
}
inline void ColumnSchemaPB::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.ColumnSchemaPB.name)
}
inline void ColumnSchemaPB::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.ColumnSchemaPB.name)
}
inline std::string* ColumnSchemaPB::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ColumnSchemaPB::release_name() {
  // @@protoc_insertion_point(field_release:demo.ColumnSchemaPB.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnSchemaPB::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:demo.ColumnSchemaPB.name)
}

// .demo.ColumnTypePB type = 3;
inline bool ColumnSchemaPB::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool ColumnSchemaPB::has_type() const {
  return _internal_has_type();
}
inline void ColumnSchemaPB::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::demo::ColumnTypePB& ColumnSchemaPB::_internal_type() const {
  const ::demo::ColumnTypePB* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::ColumnTypePB*>(
      &::demo::_ColumnTypePB_default_instance_);
}
inline const ::demo::ColumnTypePB& ColumnSchemaPB::type() const {
  // @@protoc_insertion_point(field_get:demo.ColumnSchemaPB.type)
  return _internal_type();
}
inline ::demo::ColumnTypePB* ColumnSchemaPB::release_type() {
  // @@protoc_insertion_point(field_release:demo.ColumnSchemaPB.type)
  
  ::demo::ColumnTypePB* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::demo::ColumnTypePB* ColumnSchemaPB::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::ColumnTypePB>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::demo::ColumnTypePB* ColumnSchemaPB::mutable_type() {
  // @@protoc_insertion_point(field_mutable:demo.ColumnSchemaPB.type)
  return _internal_mutable_type();
}
inline void ColumnSchemaPB::set_allocated_type(::demo::ColumnTypePB* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:demo.ColumnSchemaPB.type)
}

// -------------------------------------------------------------------

// TableSchemaPB

// uint64 id = 1;
inline void TableSchemaPB::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TableSchemaPB::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TableSchemaPB::id() const {
  // @@protoc_insertion_point(field_get:demo.TableSchemaPB.id)
  return _internal_id();
}
inline void TableSchemaPB::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void TableSchemaPB::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:demo.TableSchemaPB.id)
}

// string name = 2;
inline void TableSchemaPB::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TableSchemaPB::name() const {
  // @@protoc_insertion_point(field_get:demo.TableSchemaPB.name)
  return _internal_name();
}
inline void TableSchemaPB::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:demo.TableSchemaPB.name)
}
inline std::string* TableSchemaPB::mutable_name() {
  // @@protoc_insertion_point(field_mutable:demo.TableSchemaPB.name)
  return _internal_mutable_name();
}
inline const std::string& TableSchemaPB::_internal_name() const {
  return name_.GetNoArena();
}
inline void TableSchemaPB::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TableSchemaPB::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.TableSchemaPB.name)
}
inline void TableSchemaPB::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.TableSchemaPB.name)
}
inline void TableSchemaPB::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.TableSchemaPB.name)
}
inline std::string* TableSchemaPB::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TableSchemaPB::release_name() {
  // @@protoc_insertion_point(field_release:demo.TableSchemaPB.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TableSchemaPB::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:demo.TableSchemaPB.name)
}

// repeated .demo.ColumnSchemaPB columns = 3;
inline int TableSchemaPB::_internal_columns_size() const {
  return columns_.size();
}
inline int TableSchemaPB::columns_size() const {
  return _internal_columns_size();
}
inline void TableSchemaPB::clear_columns() {
  columns_.Clear();
}
inline ::demo::ColumnSchemaPB* TableSchemaPB::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:demo.TableSchemaPB.columns)
  return columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::ColumnSchemaPB >*
TableSchemaPB::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:demo.TableSchemaPB.columns)
  return &columns_;
}
inline const ::demo::ColumnSchemaPB& TableSchemaPB::_internal_columns(int index) const {
  return columns_.Get(index);
}
inline const ::demo::ColumnSchemaPB& TableSchemaPB::columns(int index) const {
  // @@protoc_insertion_point(field_get:demo.TableSchemaPB.columns)
  return _internal_columns(index);
}
inline ::demo::ColumnSchemaPB* TableSchemaPB::_internal_add_columns() {
  return columns_.Add();
}
inline ::demo::ColumnSchemaPB* TableSchemaPB::add_columns() {
  // @@protoc_insertion_point(field_add:demo.TableSchemaPB.columns)
  return _internal_add_columns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::ColumnSchemaPB >&
TableSchemaPB::columns() const {
  // @@protoc_insertion_point(field_list:demo.TableSchemaPB.columns)
  return columns_;
}

// -------------------------------------------------------------------

// CreateTableRequestPB

// uint64 request_id = 1;
inline void CreateTableRequestPB::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateTableRequestPB::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateTableRequestPB::request_id() const {
  // @@protoc_insertion_point(field_get:demo.CreateTableRequestPB.request_id)
  return _internal_request_id();
}
inline void CreateTableRequestPB::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void CreateTableRequestPB::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:demo.CreateTableRequestPB.request_id)
}

// .demo.TableSchemaPB schema = 2;
inline bool CreateTableRequestPB::_internal_has_schema() const {
  return this != internal_default_instance() && schema_ != nullptr;
}
inline bool CreateTableRequestPB::has_schema() const {
  return _internal_has_schema();
}
inline void CreateTableRequestPB::clear_schema() {
  if (GetArenaNoVirtual() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
}
inline const ::demo::TableSchemaPB& CreateTableRequestPB::_internal_schema() const {
  const ::demo::TableSchemaPB* p = schema_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::TableSchemaPB*>(
      &::demo::_TableSchemaPB_default_instance_);
}
inline const ::demo::TableSchemaPB& CreateTableRequestPB::schema() const {
  // @@protoc_insertion_point(field_get:demo.CreateTableRequestPB.schema)
  return _internal_schema();
}
inline ::demo::TableSchemaPB* CreateTableRequestPB::release_schema() {
  // @@protoc_insertion_point(field_release:demo.CreateTableRequestPB.schema)
  
  ::demo::TableSchemaPB* temp = schema_;
  schema_ = nullptr;
  return temp;
}
inline ::demo::TableSchemaPB* CreateTableRequestPB::_internal_mutable_schema() {
  
  if (schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::TableSchemaPB>(GetArenaNoVirtual());
    schema_ = p;
  }
  return schema_;
}
inline ::demo::TableSchemaPB* CreateTableRequestPB::mutable_schema() {
  // @@protoc_insertion_point(field_mutable:demo.CreateTableRequestPB.schema)
  return _internal_mutable_schema();
}
inline void CreateTableRequestPB::set_allocated_schema(::demo::TableSchemaPB* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete schema_;
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:demo.CreateTableRequestPB.schema)
}

// -------------------------------------------------------------------

// CreateTableResponsePB

// .demo.Status status = 1;
inline bool CreateTableResponsePB::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool CreateTableResponsePB::has_status() const {
  return _internal_has_status();
}
inline const ::demo::Status& CreateTableResponsePB::_internal_status() const {
  const ::demo::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::Status*>(
      &::demo::_Status_default_instance_);
}
inline const ::demo::Status& CreateTableResponsePB::status() const {
  // @@protoc_insertion_point(field_get:demo.CreateTableResponsePB.status)
  return _internal_status();
}
inline ::demo::Status* CreateTableResponsePB::release_status() {
  // @@protoc_insertion_point(field_release:demo.CreateTableResponsePB.status)
  
  ::demo::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::demo::Status* CreateTableResponsePB::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::demo::Status* CreateTableResponsePB::mutable_status() {
  // @@protoc_insertion_point(field_mutable:demo.CreateTableResponsePB.status)
  return _internal_mutable_status();
}
inline void CreateTableResponsePB::set_allocated_status(::demo::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:demo.CreateTableResponsePB.status)
}

// .demo.TableSchemaPB schema = 2;
inline bool CreateTableResponsePB::_internal_has_schema() const {
  return this != internal_default_instance() && schema_ != nullptr;
}
inline bool CreateTableResponsePB::has_schema() const {
  return _internal_has_schema();
}
inline void CreateTableResponsePB::clear_schema() {
  if (GetArenaNoVirtual() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
}
inline const ::demo::TableSchemaPB& CreateTableResponsePB::_internal_schema() const {
  const ::demo::TableSchemaPB* p = schema_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::TableSchemaPB*>(
      &::demo::_TableSchemaPB_default_instance_);
}
inline const ::demo::TableSchemaPB& CreateTableResponsePB::schema() const {
  // @@protoc_insertion_point(field_get:demo.CreateTableResponsePB.schema)
  return _internal_schema();
}
inline ::demo::TableSchemaPB* CreateTableResponsePB::release_schema() {
  // @@protoc_insertion_point(field_release:demo.CreateTableResponsePB.schema)
  
  ::demo::TableSchemaPB* temp = schema_;
  schema_ = nullptr;
  return temp;
}
inline ::demo::TableSchemaPB* CreateTableResponsePB::_internal_mutable_schema() {
  
  if (schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::TableSchemaPB>(GetArenaNoVirtual());
    schema_ = p;
  }
  return schema_;
}
inline ::demo::TableSchemaPB* CreateTableResponsePB::mutable_schema() {
  // @@protoc_insertion_point(field_mutable:demo.CreateTableResponsePB.schema)
  return _internal_mutable_schema();
}
inline void CreateTableResponsePB::set_allocated_schema(::demo::TableSchemaPB* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete schema_;
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:demo.CreateTableResponsePB.schema)
}

// -------------------------------------------------------------------

// BinaryVectorValuePB

// repeated int32 value = 1;
inline int BinaryVectorValuePB::_internal_value_size() const {
  return value_.size();
}
inline int BinaryVectorValuePB::value_size() const {
  return _internal_value_size();
}
inline void BinaryVectorValuePB::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinaryVectorValuePB::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinaryVectorValuePB::value(int index) const {
  // @@protoc_insertion_point(field_get:demo.BinaryVectorValuePB.value)
  return _internal_value(index);
}
inline void BinaryVectorValuePB::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.BinaryVectorValuePB.value)
}
inline void BinaryVectorValuePB::_internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Add(value);
}
inline void BinaryVectorValuePB::add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:demo.BinaryVectorValuePB.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BinaryVectorValuePB::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BinaryVectorValuePB::value() const {
  // @@protoc_insertion_point(field_list:demo.BinaryVectorValuePB.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BinaryVectorValuePB::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BinaryVectorValuePB::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:demo.BinaryVectorValuePB.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// FloatVectorValuePB

// repeated float value = 1;
inline int FloatVectorValuePB::_internal_value_size() const {
  return value_.size();
}
inline int FloatVectorValuePB::value_size() const {
  return _internal_value_size();
}
inline void FloatVectorValuePB::clear_value() {
  value_.Clear();
}
inline float FloatVectorValuePB::_internal_value(int index) const {
  return value_.Get(index);
}
inline float FloatVectorValuePB::value(int index) const {
  // @@protoc_insertion_point(field_get:demo.FloatVectorValuePB.value)
  return _internal_value(index);
}
inline void FloatVectorValuePB::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.FloatVectorValuePB.value)
}
inline void FloatVectorValuePB::_internal_add_value(float value) {
  value_.Add(value);
}
inline void FloatVectorValuePB::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:demo.FloatVectorValuePB.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatVectorValuePB::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatVectorValuePB::value() const {
  // @@protoc_insertion_point(field_list:demo.FloatVectorValuePB.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatVectorValuePB::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatVectorValuePB::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:demo.FloatVectorValuePB.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// VectorColumnValuePB

// .demo.FloatVectorValuePB float_value = 1;
inline bool VectorColumnValuePB::_internal_has_float_value() const {
  return value_case() == kFloatValue;
}
inline bool VectorColumnValuePB::has_float_value() const {
  return _internal_has_float_value();
}
inline void VectorColumnValuePB::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void VectorColumnValuePB::clear_float_value() {
  if (_internal_has_float_value()) {
    delete value_.float_value_;
    clear_has_value();
  }
}
inline ::demo::FloatVectorValuePB* VectorColumnValuePB::release_float_value() {
  // @@protoc_insertion_point(field_release:demo.VectorColumnValuePB.float_value)
  if (has_float_value()) {
    clear_has_value();
      ::demo::FloatVectorValuePB* temp = value_.float_value_;
    value_.float_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::demo::FloatVectorValuePB& VectorColumnValuePB::_internal_float_value() const {
  return _internal_has_float_value()
      ? *value_.float_value_
      : *reinterpret_cast< ::demo::FloatVectorValuePB*>(&::demo::_FloatVectorValuePB_default_instance_);
}
inline const ::demo::FloatVectorValuePB& VectorColumnValuePB::float_value() const {
  // @@protoc_insertion_point(field_get:demo.VectorColumnValuePB.float_value)
  return _internal_float_value();
}
inline ::demo::FloatVectorValuePB* VectorColumnValuePB::_internal_mutable_float_value() {
  if (!_internal_has_float_value()) {
    clear_value();
    set_has_float_value();
    value_.float_value_ = CreateMaybeMessage< ::demo::FloatVectorValuePB >(
        GetArenaNoVirtual());
  }
  return value_.float_value_;
}
inline ::demo::FloatVectorValuePB* VectorColumnValuePB::mutable_float_value() {
  // @@protoc_insertion_point(field_mutable:demo.VectorColumnValuePB.float_value)
  return _internal_mutable_float_value();
}

// .demo.BinaryVectorValuePB binary_value = 2;
inline bool VectorColumnValuePB::_internal_has_binary_value() const {
  return value_case() == kBinaryValue;
}
inline bool VectorColumnValuePB::has_binary_value() const {
  return _internal_has_binary_value();
}
inline void VectorColumnValuePB::set_has_binary_value() {
  _oneof_case_[0] = kBinaryValue;
}
inline void VectorColumnValuePB::clear_binary_value() {
  if (_internal_has_binary_value()) {
    delete value_.binary_value_;
    clear_has_value();
  }
}
inline ::demo::BinaryVectorValuePB* VectorColumnValuePB::release_binary_value() {
  // @@protoc_insertion_point(field_release:demo.VectorColumnValuePB.binary_value)
  if (has_binary_value()) {
    clear_has_value();
      ::demo::BinaryVectorValuePB* temp = value_.binary_value_;
    value_.binary_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::demo::BinaryVectorValuePB& VectorColumnValuePB::_internal_binary_value() const {
  return _internal_has_binary_value()
      ? *value_.binary_value_
      : *reinterpret_cast< ::demo::BinaryVectorValuePB*>(&::demo::_BinaryVectorValuePB_default_instance_);
}
inline const ::demo::BinaryVectorValuePB& VectorColumnValuePB::binary_value() const {
  // @@protoc_insertion_point(field_get:demo.VectorColumnValuePB.binary_value)
  return _internal_binary_value();
}
inline ::demo::BinaryVectorValuePB* VectorColumnValuePB::_internal_mutable_binary_value() {
  if (!_internal_has_binary_value()) {
    clear_value();
    set_has_binary_value();
    value_.binary_value_ = CreateMaybeMessage< ::demo::BinaryVectorValuePB >(
        GetArenaNoVirtual());
  }
  return value_.binary_value_;
}
inline ::demo::BinaryVectorValuePB* VectorColumnValuePB::mutable_binary_value() {
  // @@protoc_insertion_point(field_mutable:demo.VectorColumnValuePB.binary_value)
  return _internal_mutable_binary_value();
}

inline bool VectorColumnValuePB::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void VectorColumnValuePB::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline VectorColumnValuePB::ValueCase VectorColumnValuePB::value_case() const {
  return VectorColumnValuePB::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ColumnValuePB

// int32 int8_value = 1;
inline bool ColumnValuePB::_internal_has_int8_value() const {
  return value_case() == kInt8Value;
}
inline void ColumnValuePB::set_has_int8_value() {
  _oneof_case_[0] = kInt8Value;
}
inline void ColumnValuePB::clear_int8_value() {
  if (_internal_has_int8_value()) {
    value_.int8_value_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnValuePB::_internal_int8_value() const {
  if (_internal_has_int8_value()) {
    return value_.int8_value_;
  }
  return 0;
}
inline void ColumnValuePB::_internal_set_int8_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int8_value()) {
    clear_value();
    set_has_int8_value();
  }
  value_.int8_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnValuePB::int8_value() const {
  // @@protoc_insertion_point(field_get:demo.ColumnValuePB.int8_value)
  return _internal_int8_value();
}
inline void ColumnValuePB::set_int8_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int8_value(value);
  // @@protoc_insertion_point(field_set:demo.ColumnValuePB.int8_value)
}

// int32 int16_value = 2;
inline bool ColumnValuePB::_internal_has_int16_value() const {
  return value_case() == kInt16Value;
}
inline void ColumnValuePB::set_has_int16_value() {
  _oneof_case_[0] = kInt16Value;
}
inline void ColumnValuePB::clear_int16_value() {
  if (_internal_has_int16_value()) {
    value_.int16_value_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnValuePB::_internal_int16_value() const {
  if (_internal_has_int16_value()) {
    return value_.int16_value_;
  }
  return 0;
}
inline void ColumnValuePB::_internal_set_int16_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int16_value()) {
    clear_value();
    set_has_int16_value();
  }
  value_.int16_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnValuePB::int16_value() const {
  // @@protoc_insertion_point(field_get:demo.ColumnValuePB.int16_value)
  return _internal_int16_value();
}
inline void ColumnValuePB::set_int16_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int16_value(value);
  // @@protoc_insertion_point(field_set:demo.ColumnValuePB.int16_value)
}

// int32 int32_value = 3;
inline bool ColumnValuePB::_internal_has_int32_value() const {
  return value_case() == kInt32Value;
}
inline void ColumnValuePB::set_has_int32_value() {
  _oneof_case_[0] = kInt32Value;
}
inline void ColumnValuePB::clear_int32_value() {
  if (_internal_has_int32_value()) {
    value_.int32_value_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnValuePB::_internal_int32_value() const {
  if (_internal_has_int32_value()) {
    return value_.int32_value_;
  }
  return 0;
}
inline void ColumnValuePB::_internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int32_value()) {
    clear_value();
    set_has_int32_value();
  }
  value_.int32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnValuePB::int32_value() const {
  // @@protoc_insertion_point(field_get:demo.ColumnValuePB.int32_value)
  return _internal_int32_value();
}
inline void ColumnValuePB::set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int32_value(value);
  // @@protoc_insertion_point(field_set:demo.ColumnValuePB.int32_value)
}

// int64 int64_value = 4;
inline bool ColumnValuePB::_internal_has_int64_value() const {
  return value_case() == kInt64Value;
}
inline void ColumnValuePB::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void ColumnValuePB::clear_int64_value() {
  if (_internal_has_int64_value()) {
    value_.int64_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ColumnValuePB::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return value_.int64_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void ColumnValuePB::_internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int64_value()) {
    clear_value();
    set_has_int64_value();
  }
  value_.int64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ColumnValuePB::int64_value() const {
  // @@protoc_insertion_point(field_get:demo.ColumnValuePB.int64_value)
  return _internal_int64_value();
}
inline void ColumnValuePB::set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:demo.ColumnValuePB.int64_value)
}

// float float_value = 5;
inline bool ColumnValuePB::_internal_has_float_value() const {
  return value_case() == kFloatValue;
}
inline void ColumnValuePB::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void ColumnValuePB::clear_float_value() {
  if (_internal_has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float ColumnValuePB::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
inline void ColumnValuePB::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
}
inline float ColumnValuePB::float_value() const {
  // @@protoc_insertion_point(field_get:demo.ColumnValuePB.float_value)
  return _internal_float_value();
}
inline void ColumnValuePB::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:demo.ColumnValuePB.float_value)
}

// double double_value = 6;
inline bool ColumnValuePB::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void ColumnValuePB::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void ColumnValuePB::clear_double_value() {
  if (_internal_has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double ColumnValuePB::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void ColumnValuePB::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
}
inline double ColumnValuePB::double_value() const {
  // @@protoc_insertion_point(field_get:demo.ColumnValuePB.double_value)
  return _internal_double_value();
}
inline void ColumnValuePB::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:demo.ColumnValuePB.double_value)
}

// string string_value = 7;
inline bool ColumnValuePB::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline void ColumnValuePB::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void ColumnValuePB::clear_string_value() {
  if (_internal_has_string_value()) {
    value_.string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const std::string& ColumnValuePB::string_value() const {
  // @@protoc_insertion_point(field_get:demo.ColumnValuePB.string_value)
  return _internal_string_value();
}
inline void ColumnValuePB::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:demo.ColumnValuePB.string_value)
}
inline std::string* ColumnValuePB::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:demo.ColumnValuePB.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& ColumnValuePB::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_.string_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ColumnValuePB::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ColumnValuePB::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:demo.ColumnValuePB.string_value)
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.ColumnValuePB.string_value)
}
inline void ColumnValuePB::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.ColumnValuePB.string_value)
}
inline void ColumnValuePB::set_string_value(const char* value, size_t size) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.ColumnValuePB.string_value)
}
inline std::string* ColumnValuePB::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ColumnValuePB::release_string_value() {
  // @@protoc_insertion_point(field_release:demo.ColumnValuePB.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ColumnValuePB::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:demo.ColumnValuePB.string_value)
}

// bool bool_value = 8;
inline bool ColumnValuePB::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void ColumnValuePB::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void ColumnValuePB::clear_bool_value() {
  if (_internal_has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool ColumnValuePB::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void ColumnValuePB::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
}
inline bool ColumnValuePB::bool_value() const {
  // @@protoc_insertion_point(field_get:demo.ColumnValuePB.bool_value)
  return _internal_bool_value();
}
inline void ColumnValuePB::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:demo.ColumnValuePB.bool_value)
}

// .demo.VectorColumnValuePB vector_value = 9;
inline bool ColumnValuePB::_internal_has_vector_value() const {
  return value_case() == kVectorValue;
}
inline bool ColumnValuePB::has_vector_value() const {
  return _internal_has_vector_value();
}
inline void ColumnValuePB::set_has_vector_value() {
  _oneof_case_[0] = kVectorValue;
}
inline void ColumnValuePB::clear_vector_value() {
  if (_internal_has_vector_value()) {
    delete value_.vector_value_;
    clear_has_value();
  }
}
inline ::demo::VectorColumnValuePB* ColumnValuePB::release_vector_value() {
  // @@protoc_insertion_point(field_release:demo.ColumnValuePB.vector_value)
  if (has_vector_value()) {
    clear_has_value();
      ::demo::VectorColumnValuePB* temp = value_.vector_value_;
    value_.vector_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::demo::VectorColumnValuePB& ColumnValuePB::_internal_vector_value() const {
  return _internal_has_vector_value()
      ? *value_.vector_value_
      : *reinterpret_cast< ::demo::VectorColumnValuePB*>(&::demo::_VectorColumnValuePB_default_instance_);
}
inline const ::demo::VectorColumnValuePB& ColumnValuePB::vector_value() const {
  // @@protoc_insertion_point(field_get:demo.ColumnValuePB.vector_value)
  return _internal_vector_value();
}
inline ::demo::VectorColumnValuePB* ColumnValuePB::_internal_mutable_vector_value() {
  if (!_internal_has_vector_value()) {
    clear_value();
    set_has_vector_value();
    value_.vector_value_ = CreateMaybeMessage< ::demo::VectorColumnValuePB >(
        GetArenaNoVirtual());
  }
  return value_.vector_value_;
}
inline ::demo::VectorColumnValuePB* ColumnValuePB::mutable_vector_value() {
  // @@protoc_insertion_point(field_mutable:demo.ColumnValuePB.vector_value)
  return _internal_mutable_vector_value();
}

inline bool ColumnValuePB::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ColumnValuePB::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ColumnValuePB::ValueCase ColumnValuePB::value_case() const {
  return ColumnValuePB::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QueryColumnPB

// string name = 1;
inline void QueryColumnPB::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryColumnPB::name() const {
  // @@protoc_insertion_point(field_get:demo.QueryColumnPB.name)
  return _internal_name();
}
inline void QueryColumnPB::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:demo.QueryColumnPB.name)
}
inline std::string* QueryColumnPB::mutable_name() {
  // @@protoc_insertion_point(field_mutable:demo.QueryColumnPB.name)
  return _internal_mutable_name();
}
inline const std::string& QueryColumnPB::_internal_name() const {
  return name_.GetNoArena();
}
inline void QueryColumnPB::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryColumnPB::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.QueryColumnPB.name)
}
inline void QueryColumnPB::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.QueryColumnPB.name)
}
inline void QueryColumnPB::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.QueryColumnPB.name)
}
inline std::string* QueryColumnPB::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryColumnPB::release_name() {
  // @@protoc_insertion_point(field_release:demo.QueryColumnPB.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryColumnPB::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:demo.QueryColumnPB.name)
}

// .demo.ColumnValuePB value = 2;
inline bool QueryColumnPB::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool QueryColumnPB::has_value() const {
  return _internal_has_value();
}
inline void QueryColumnPB::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::demo::ColumnValuePB& QueryColumnPB::_internal_value() const {
  const ::demo::ColumnValuePB* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::ColumnValuePB*>(
      &::demo::_ColumnValuePB_default_instance_);
}
inline const ::demo::ColumnValuePB& QueryColumnPB::value() const {
  // @@protoc_insertion_point(field_get:demo.QueryColumnPB.value)
  return _internal_value();
}
inline ::demo::ColumnValuePB* QueryColumnPB::release_value() {
  // @@protoc_insertion_point(field_release:demo.QueryColumnPB.value)
  
  ::demo::ColumnValuePB* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::demo::ColumnValuePB* QueryColumnPB::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::ColumnValuePB>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline ::demo::ColumnValuePB* QueryColumnPB::mutable_value() {
  // @@protoc_insertion_point(field_mutable:demo.QueryColumnPB.value)
  return _internal_mutable_value();
}
inline void QueryColumnPB::set_allocated_value(::demo::ColumnValuePB* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:demo.QueryColumnPB.value)
}

// -------------------------------------------------------------------

// TermQueryPB

// .demo.QueryColumnPB field = 1;
inline bool TermQueryPB::_internal_has_field() const {
  return this != internal_default_instance() && field_ != nullptr;
}
inline bool TermQueryPB::has_field() const {
  return _internal_has_field();
}
inline void TermQueryPB::clear_field() {
  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
}
inline const ::demo::QueryColumnPB& TermQueryPB::_internal_field() const {
  const ::demo::QueryColumnPB* p = field_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::QueryColumnPB*>(
      &::demo::_QueryColumnPB_default_instance_);
}
inline const ::demo::QueryColumnPB& TermQueryPB::field() const {
  // @@protoc_insertion_point(field_get:demo.TermQueryPB.field)
  return _internal_field();
}
inline ::demo::QueryColumnPB* TermQueryPB::release_field() {
  // @@protoc_insertion_point(field_release:demo.TermQueryPB.field)
  
  ::demo::QueryColumnPB* temp = field_;
  field_ = nullptr;
  return temp;
}
inline ::demo::QueryColumnPB* TermQueryPB::_internal_mutable_field() {
  
  if (field_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::QueryColumnPB>(GetArenaNoVirtual());
    field_ = p;
  }
  return field_;
}
inline ::demo::QueryColumnPB* TermQueryPB::mutable_field() {
  // @@protoc_insertion_point(field_mutable:demo.TermQueryPB.field)
  return _internal_mutable_field();
}
inline void TermQueryPB::set_allocated_field(::demo::QueryColumnPB* field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete field_;
  }
  if (field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:demo.TermQueryPB.field)
}

// repeated .demo.ColumnValuePB values = 2;
inline int TermQueryPB::_internal_values_size() const {
  return values_.size();
}
inline int TermQueryPB::values_size() const {
  return _internal_values_size();
}
inline void TermQueryPB::clear_values() {
  values_.Clear();
}
inline ::demo::ColumnValuePB* TermQueryPB::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:demo.TermQueryPB.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::ColumnValuePB >*
TermQueryPB::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:demo.TermQueryPB.values)
  return &values_;
}
inline const ::demo::ColumnValuePB& TermQueryPB::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::demo::ColumnValuePB& TermQueryPB::values(int index) const {
  // @@protoc_insertion_point(field_get:demo.TermQueryPB.values)
  return _internal_values(index);
}
inline ::demo::ColumnValuePB* TermQueryPB::_internal_add_values() {
  return values_.Add();
}
inline ::demo::ColumnValuePB* TermQueryPB::add_values() {
  // @@protoc_insertion_point(field_add:demo.TermQueryPB.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::ColumnValuePB >&
TermQueryPB::values() const {
  // @@protoc_insertion_point(field_list:demo.TermQueryPB.values)
  return values_;
}

// -------------------------------------------------------------------

// CompareExprPB

// .demo.CompareOperator operator = 1;
inline void CompareExprPB::clear_operator_() {
  operator__ = 0;
}
inline ::demo::CompareOperator CompareExprPB::_internal_operator_() const {
  return static_cast< ::demo::CompareOperator >(operator__);
}
inline ::demo::CompareOperator CompareExprPB::operator_() const {
  // @@protoc_insertion_point(field_get:demo.CompareExprPB.operator)
  return _internal_operator_();
}
inline void CompareExprPB::_internal_set_operator_(::demo::CompareOperator value) {
  
  operator__ = value;
}
inline void CompareExprPB::set_operator_(::demo::CompareOperator value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:demo.CompareExprPB.operator)
}

// .demo.ColumnValuePB operand = 2;
inline bool CompareExprPB::_internal_has_operand() const {
  return this != internal_default_instance() && operand_ != nullptr;
}
inline bool CompareExprPB::has_operand() const {
  return _internal_has_operand();
}
inline void CompareExprPB::clear_operand() {
  if (GetArenaNoVirtual() == nullptr && operand_ != nullptr) {
    delete operand_;
  }
  operand_ = nullptr;
}
inline const ::demo::ColumnValuePB& CompareExprPB::_internal_operand() const {
  const ::demo::ColumnValuePB* p = operand_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::ColumnValuePB*>(
      &::demo::_ColumnValuePB_default_instance_);
}
inline const ::demo::ColumnValuePB& CompareExprPB::operand() const {
  // @@protoc_insertion_point(field_get:demo.CompareExprPB.operand)
  return _internal_operand();
}
inline ::demo::ColumnValuePB* CompareExprPB::release_operand() {
  // @@protoc_insertion_point(field_release:demo.CompareExprPB.operand)
  
  ::demo::ColumnValuePB* temp = operand_;
  operand_ = nullptr;
  return temp;
}
inline ::demo::ColumnValuePB* CompareExprPB::_internal_mutable_operand() {
  
  if (operand_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::ColumnValuePB>(GetArenaNoVirtual());
    operand_ = p;
  }
  return operand_;
}
inline ::demo::ColumnValuePB* CompareExprPB::mutable_operand() {
  // @@protoc_insertion_point(field_mutable:demo.CompareExprPB.operand)
  return _internal_mutable_operand();
}
inline void CompareExprPB::set_allocated_operand(::demo::ColumnValuePB* operand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete operand_;
  }
  if (operand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      operand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operand, submessage_arena);
    }
    
  } else {
    
  }
  operand_ = operand;
  // @@protoc_insertion_point(field_set_allocated:demo.CompareExprPB.operand)
}

// -------------------------------------------------------------------

// RangeQueryPB

// .demo.QueryColumnPB field = 1;
inline bool RangeQueryPB::_internal_has_field() const {
  return this != internal_default_instance() && field_ != nullptr;
}
inline bool RangeQueryPB::has_field() const {
  return _internal_has_field();
}
inline void RangeQueryPB::clear_field() {
  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
}
inline const ::demo::QueryColumnPB& RangeQueryPB::_internal_field() const {
  const ::demo::QueryColumnPB* p = field_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::QueryColumnPB*>(
      &::demo::_QueryColumnPB_default_instance_);
}
inline const ::demo::QueryColumnPB& RangeQueryPB::field() const {
  // @@protoc_insertion_point(field_get:demo.RangeQueryPB.field)
  return _internal_field();
}
inline ::demo::QueryColumnPB* RangeQueryPB::release_field() {
  // @@protoc_insertion_point(field_release:demo.RangeQueryPB.field)
  
  ::demo::QueryColumnPB* temp = field_;
  field_ = nullptr;
  return temp;
}
inline ::demo::QueryColumnPB* RangeQueryPB::_internal_mutable_field() {
  
  if (field_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::QueryColumnPB>(GetArenaNoVirtual());
    field_ = p;
  }
  return field_;
}
inline ::demo::QueryColumnPB* RangeQueryPB::mutable_field() {
  // @@protoc_insertion_point(field_mutable:demo.RangeQueryPB.field)
  return _internal_mutable_field();
}
inline void RangeQueryPB::set_allocated_field(::demo::QueryColumnPB* field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete field_;
  }
  if (field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:demo.RangeQueryPB.field)
}

// repeated .demo.CompareExprPB operand = 2;
inline int RangeQueryPB::_internal_operand_size() const {
  return operand_.size();
}
inline int RangeQueryPB::operand_size() const {
  return _internal_operand_size();
}
inline void RangeQueryPB::clear_operand() {
  operand_.Clear();
}
inline ::demo::CompareExprPB* RangeQueryPB::mutable_operand(int index) {
  // @@protoc_insertion_point(field_mutable:demo.RangeQueryPB.operand)
  return operand_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::CompareExprPB >*
RangeQueryPB::mutable_operand() {
  // @@protoc_insertion_point(field_mutable_list:demo.RangeQueryPB.operand)
  return &operand_;
}
inline const ::demo::CompareExprPB& RangeQueryPB::_internal_operand(int index) const {
  return operand_.Get(index);
}
inline const ::demo::CompareExprPB& RangeQueryPB::operand(int index) const {
  // @@protoc_insertion_point(field_get:demo.RangeQueryPB.operand)
  return _internal_operand(index);
}
inline ::demo::CompareExprPB* RangeQueryPB::_internal_add_operand() {
  return operand_.Add();
}
inline ::demo::CompareExprPB* RangeQueryPB::add_operand() {
  // @@protoc_insertion_point(field_add:demo.RangeQueryPB.operand)
  return _internal_add_operand();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::CompareExprPB >&
RangeQueryPB::operand() const {
  // @@protoc_insertion_point(field_list:demo.RangeQueryPB.operand)
  return operand_;
}

// -------------------------------------------------------------------

// InnerLeafQueryPB

// .demo.TermQueryPB term_query = 1;
inline bool InnerLeafQueryPB::_internal_has_term_query() const {
  return query_case() == kTermQuery;
}
inline bool InnerLeafQueryPB::has_term_query() const {
  return _internal_has_term_query();
}
inline void InnerLeafQueryPB::set_has_term_query() {
  _oneof_case_[0] = kTermQuery;
}
inline void InnerLeafQueryPB::clear_term_query() {
  if (_internal_has_term_query()) {
    delete query_.term_query_;
    clear_has_query();
  }
}
inline ::demo::TermQueryPB* InnerLeafQueryPB::release_term_query() {
  // @@protoc_insertion_point(field_release:demo.InnerLeafQueryPB.term_query)
  if (has_term_query()) {
    clear_has_query();
      ::demo::TermQueryPB* temp = query_.term_query_;
    query_.term_query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::demo::TermQueryPB& InnerLeafQueryPB::_internal_term_query() const {
  return _internal_has_term_query()
      ? *query_.term_query_
      : *reinterpret_cast< ::demo::TermQueryPB*>(&::demo::_TermQueryPB_default_instance_);
}
inline const ::demo::TermQueryPB& InnerLeafQueryPB::term_query() const {
  // @@protoc_insertion_point(field_get:demo.InnerLeafQueryPB.term_query)
  return _internal_term_query();
}
inline ::demo::TermQueryPB* InnerLeafQueryPB::_internal_mutable_term_query() {
  if (!_internal_has_term_query()) {
    clear_query();
    set_has_term_query();
    query_.term_query_ = CreateMaybeMessage< ::demo::TermQueryPB >(
        GetArenaNoVirtual());
  }
  return query_.term_query_;
}
inline ::demo::TermQueryPB* InnerLeafQueryPB::mutable_term_query() {
  // @@protoc_insertion_point(field_mutable:demo.InnerLeafQueryPB.term_query)
  return _internal_mutable_term_query();
}

// .demo.RangeQueryPB range_query = 2;
inline bool InnerLeafQueryPB::_internal_has_range_query() const {
  return query_case() == kRangeQuery;
}
inline bool InnerLeafQueryPB::has_range_query() const {
  return _internal_has_range_query();
}
inline void InnerLeafQueryPB::set_has_range_query() {
  _oneof_case_[0] = kRangeQuery;
}
inline void InnerLeafQueryPB::clear_range_query() {
  if (_internal_has_range_query()) {
    delete query_.range_query_;
    clear_has_query();
  }
}
inline ::demo::RangeQueryPB* InnerLeafQueryPB::release_range_query() {
  // @@protoc_insertion_point(field_release:demo.InnerLeafQueryPB.range_query)
  if (has_range_query()) {
    clear_has_query();
      ::demo::RangeQueryPB* temp = query_.range_query_;
    query_.range_query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::demo::RangeQueryPB& InnerLeafQueryPB::_internal_range_query() const {
  return _internal_has_range_query()
      ? *query_.range_query_
      : *reinterpret_cast< ::demo::RangeQueryPB*>(&::demo::_RangeQueryPB_default_instance_);
}
inline const ::demo::RangeQueryPB& InnerLeafQueryPB::range_query() const {
  // @@protoc_insertion_point(field_get:demo.InnerLeafQueryPB.range_query)
  return _internal_range_query();
}
inline ::demo::RangeQueryPB* InnerLeafQueryPB::_internal_mutable_range_query() {
  if (!_internal_has_range_query()) {
    clear_query();
    set_has_range_query();
    query_.range_query_ = CreateMaybeMessage< ::demo::RangeQueryPB >(
        GetArenaNoVirtual());
  }
  return query_.range_query_;
}
inline ::demo::RangeQueryPB* InnerLeafQueryPB::mutable_range_query() {
  // @@protoc_insertion_point(field_mutable:demo.InnerLeafQueryPB.range_query)
  return _internal_mutable_range_query();
}

inline bool InnerLeafQueryPB::has_query() const {
  return query_case() != QUERY_NOT_SET;
}
inline void InnerLeafQueryPB::clear_has_query() {
  _oneof_case_[0] = QUERY_NOT_SET;
}
inline InnerLeafQueryPB::QueryCase InnerLeafQueryPB::query_case() const {
  return InnerLeafQueryPB::QueryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LeafQueryPB

// .demo.InnerLeafQueryPB query = 1;
inline bool LeafQueryPB::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool LeafQueryPB::has_query() const {
  return _internal_has_query();
}
inline void LeafQueryPB::clear_query() {
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
inline const ::demo::InnerLeafQueryPB& LeafQueryPB::_internal_query() const {
  const ::demo::InnerLeafQueryPB* p = query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::InnerLeafQueryPB*>(
      &::demo::_InnerLeafQueryPB_default_instance_);
}
inline const ::demo::InnerLeafQueryPB& LeafQueryPB::query() const {
  // @@protoc_insertion_point(field_get:demo.LeafQueryPB.query)
  return _internal_query();
}
inline ::demo::InnerLeafQueryPB* LeafQueryPB::release_query() {
  // @@protoc_insertion_point(field_release:demo.LeafQueryPB.query)
  
  ::demo::InnerLeafQueryPB* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::demo::InnerLeafQueryPB* LeafQueryPB::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::InnerLeafQueryPB>(GetArenaNoVirtual());
    query_ = p;
  }
  return query_;
}
inline ::demo::InnerLeafQueryPB* LeafQueryPB::mutable_query() {
  // @@protoc_insertion_point(field_mutable:demo.LeafQueryPB.query)
  return _internal_mutable_query();
}
inline void LeafQueryPB::set_allocated_query(::demo::InnerLeafQueryPB* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:demo.LeafQueryPB.query)
}

// float boost = 2;
inline void LeafQueryPB::clear_boost() {
  boost_ = 0;
}
inline float LeafQueryPB::_internal_boost() const {
  return boost_;
}
inline float LeafQueryPB::boost() const {
  // @@protoc_insertion_point(field_get:demo.LeafQueryPB.boost)
  return _internal_boost();
}
inline void LeafQueryPB::_internal_set_boost(float value) {
  
  boost_ = value;
}
inline void LeafQueryPB::set_boost(float value) {
  _internal_set_boost(value);
  // @@protoc_insertion_point(field_set:demo.LeafQueryPB.boost)
}

// -------------------------------------------------------------------

// GeneralQueryPB

// .demo.LeafQueryPB leaf = 1;
inline bool GeneralQueryPB::_internal_has_leaf() const {
  return query_case() == kLeaf;
}
inline bool GeneralQueryPB::has_leaf() const {
  return _internal_has_leaf();
}
inline void GeneralQueryPB::set_has_leaf() {
  _oneof_case_[0] = kLeaf;
}
inline void GeneralQueryPB::clear_leaf() {
  if (_internal_has_leaf()) {
    delete query_.leaf_;
    clear_has_query();
  }
}
inline ::demo::LeafQueryPB* GeneralQueryPB::release_leaf() {
  // @@protoc_insertion_point(field_release:demo.GeneralQueryPB.leaf)
  if (has_leaf()) {
    clear_has_query();
      ::demo::LeafQueryPB* temp = query_.leaf_;
    query_.leaf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::demo::LeafQueryPB& GeneralQueryPB::_internal_leaf() const {
  return _internal_has_leaf()
      ? *query_.leaf_
      : *reinterpret_cast< ::demo::LeafQueryPB*>(&::demo::_LeafQueryPB_default_instance_);
}
inline const ::demo::LeafQueryPB& GeneralQueryPB::leaf() const {
  // @@protoc_insertion_point(field_get:demo.GeneralQueryPB.leaf)
  return _internal_leaf();
}
inline ::demo::LeafQueryPB* GeneralQueryPB::_internal_mutable_leaf() {
  if (!_internal_has_leaf()) {
    clear_query();
    set_has_leaf();
    query_.leaf_ = CreateMaybeMessage< ::demo::LeafQueryPB >(
        GetArenaNoVirtual());
  }
  return query_.leaf_;
}
inline ::demo::LeafQueryPB* GeneralQueryPB::mutable_leaf() {
  // @@protoc_insertion_point(field_mutable:demo.GeneralQueryPB.leaf)
  return _internal_mutable_leaf();
}

// .demo.BinaryQueryPB bin = 2;
inline bool GeneralQueryPB::_internal_has_bin() const {
  return query_case() == kBin;
}
inline bool GeneralQueryPB::has_bin() const {
  return _internal_has_bin();
}
inline void GeneralQueryPB::set_has_bin() {
  _oneof_case_[0] = kBin;
}
inline void GeneralQueryPB::clear_bin() {
  if (_internal_has_bin()) {
    delete query_.bin_;
    clear_has_query();
  }
}
inline ::demo::BinaryQueryPB* GeneralQueryPB::release_bin() {
  // @@protoc_insertion_point(field_release:demo.GeneralQueryPB.bin)
  if (has_bin()) {
    clear_has_query();
      ::demo::BinaryQueryPB* temp = query_.bin_;
    query_.bin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::demo::BinaryQueryPB& GeneralQueryPB::_internal_bin() const {
  return _internal_has_bin()
      ? *query_.bin_
      : *reinterpret_cast< ::demo::BinaryQueryPB*>(&::demo::_BinaryQueryPB_default_instance_);
}
inline const ::demo::BinaryQueryPB& GeneralQueryPB::bin() const {
  // @@protoc_insertion_point(field_get:demo.GeneralQueryPB.bin)
  return _internal_bin();
}
inline ::demo::BinaryQueryPB* GeneralQueryPB::_internal_mutable_bin() {
  if (!_internal_has_bin()) {
    clear_query();
    set_has_bin();
    query_.bin_ = CreateMaybeMessage< ::demo::BinaryQueryPB >(
        GetArenaNoVirtual());
  }
  return query_.bin_;
}
inline ::demo::BinaryQueryPB* GeneralQueryPB::mutable_bin() {
  // @@protoc_insertion_point(field_mutable:demo.GeneralQueryPB.bin)
  return _internal_mutable_bin();
}

inline bool GeneralQueryPB::has_query() const {
  return query_case() != QUERY_NOT_SET;
}
inline void GeneralQueryPB::clear_has_query() {
  _oneof_case_[0] = QUERY_NOT_SET;
}
inline GeneralQueryPB::QueryCase GeneralQueryPB::query_case() const {
  return GeneralQueryPB::QueryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BinaryQueryPB

// .demo.GeneralQueryPB left_query = 1;
inline bool BinaryQueryPB::_internal_has_left_query() const {
  return this != internal_default_instance() && left_query_ != nullptr;
}
inline bool BinaryQueryPB::has_left_query() const {
  return _internal_has_left_query();
}
inline void BinaryQueryPB::clear_left_query() {
  if (GetArenaNoVirtual() == nullptr && left_query_ != nullptr) {
    delete left_query_;
  }
  left_query_ = nullptr;
}
inline const ::demo::GeneralQueryPB& BinaryQueryPB::_internal_left_query() const {
  const ::demo::GeneralQueryPB* p = left_query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::GeneralQueryPB*>(
      &::demo::_GeneralQueryPB_default_instance_);
}
inline const ::demo::GeneralQueryPB& BinaryQueryPB::left_query() const {
  // @@protoc_insertion_point(field_get:demo.BinaryQueryPB.left_query)
  return _internal_left_query();
}
inline ::demo::GeneralQueryPB* BinaryQueryPB::release_left_query() {
  // @@protoc_insertion_point(field_release:demo.BinaryQueryPB.left_query)
  
  ::demo::GeneralQueryPB* temp = left_query_;
  left_query_ = nullptr;
  return temp;
}
inline ::demo::GeneralQueryPB* BinaryQueryPB::_internal_mutable_left_query() {
  
  if (left_query_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::GeneralQueryPB>(GetArenaNoVirtual());
    left_query_ = p;
  }
  return left_query_;
}
inline ::demo::GeneralQueryPB* BinaryQueryPB::mutable_left_query() {
  // @@protoc_insertion_point(field_mutable:demo.BinaryQueryPB.left_query)
  return _internal_mutable_left_query();
}
inline void BinaryQueryPB::set_allocated_left_query(::demo::GeneralQueryPB* left_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete left_query_;
  }
  if (left_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      left_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_query, submessage_arena);
    }
    
  } else {
    
  }
  left_query_ = left_query;
  // @@protoc_insertion_point(field_set_allocated:demo.BinaryQueryPB.left_query)
}

// .demo.GeneralQueryPB right_query = 2;
inline bool BinaryQueryPB::_internal_has_right_query() const {
  return this != internal_default_instance() && right_query_ != nullptr;
}
inline bool BinaryQueryPB::has_right_query() const {
  return _internal_has_right_query();
}
inline void BinaryQueryPB::clear_right_query() {
  if (GetArenaNoVirtual() == nullptr && right_query_ != nullptr) {
    delete right_query_;
  }
  right_query_ = nullptr;
}
inline const ::demo::GeneralQueryPB& BinaryQueryPB::_internal_right_query() const {
  const ::demo::GeneralQueryPB* p = right_query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::GeneralQueryPB*>(
      &::demo::_GeneralQueryPB_default_instance_);
}
inline const ::demo::GeneralQueryPB& BinaryQueryPB::right_query() const {
  // @@protoc_insertion_point(field_get:demo.BinaryQueryPB.right_query)
  return _internal_right_query();
}
inline ::demo::GeneralQueryPB* BinaryQueryPB::release_right_query() {
  // @@protoc_insertion_point(field_release:demo.BinaryQueryPB.right_query)
  
  ::demo::GeneralQueryPB* temp = right_query_;
  right_query_ = nullptr;
  return temp;
}
inline ::demo::GeneralQueryPB* BinaryQueryPB::_internal_mutable_right_query() {
  
  if (right_query_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::GeneralQueryPB>(GetArenaNoVirtual());
    right_query_ = p;
  }
  return right_query_;
}
inline ::demo::GeneralQueryPB* BinaryQueryPB::mutable_right_query() {
  // @@protoc_insertion_point(field_mutable:demo.BinaryQueryPB.right_query)
  return _internal_mutable_right_query();
}
inline void BinaryQueryPB::set_allocated_right_query(::demo::GeneralQueryPB* right_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete right_query_;
  }
  if (right_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      right_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_query, submessage_arena);
    }
    
  } else {
    
  }
  right_query_ = right_query;
  // @@protoc_insertion_point(field_set_allocated:demo.BinaryQueryPB.right_query)
}

// .demo.QueryRelation relation = 3;
inline void BinaryQueryPB::clear_relation() {
  relation_ = 0;
}
inline ::demo::QueryRelation BinaryQueryPB::_internal_relation() const {
  return static_cast< ::demo::QueryRelation >(relation_);
}
inline ::demo::QueryRelation BinaryQueryPB::relation() const {
  // @@protoc_insertion_point(field_get:demo.BinaryQueryPB.relation)
  return _internal_relation();
}
inline void BinaryQueryPB::_internal_set_relation(::demo::QueryRelation value) {
  
  relation_ = value;
}
inline void BinaryQueryPB::set_relation(::demo::QueryRelation value) {
  _internal_set_relation(value);
  // @@protoc_insertion_point(field_set:demo.BinaryQueryPB.relation)
}

// float boost = 4;
inline void BinaryQueryPB::clear_boost() {
  boost_ = 0;
}
inline float BinaryQueryPB::_internal_boost() const {
  return boost_;
}
inline float BinaryQueryPB::boost() const {
  // @@protoc_insertion_point(field_get:demo.BinaryQueryPB.boost)
  return _internal_boost();
}
inline void BinaryQueryPB::_internal_set_boost(float value) {
  
  boost_ = value;
}
inline void BinaryQueryPB::set_boost(float value) {
  _internal_set_boost(value);
  // @@protoc_insertion_point(field_set:demo.BinaryQueryPB.boost)
}

// -------------------------------------------------------------------

// QueryRequestPB

// uint64 request_id = 1;
inline void QueryRequestPB::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryRequestPB::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryRequestPB::request_id() const {
  // @@protoc_insertion_point(field_get:demo.QueryRequestPB.request_id)
  return _internal_request_id();
}
inline void QueryRequestPB::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void QueryRequestPB::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:demo.QueryRequestPB.request_id)
}

// .demo.GeneralQueryPB query = 2;
inline bool QueryRequestPB::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool QueryRequestPB::has_query() const {
  return _internal_has_query();
}
inline void QueryRequestPB::clear_query() {
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
inline const ::demo::GeneralQueryPB& QueryRequestPB::_internal_query() const {
  const ::demo::GeneralQueryPB* p = query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::GeneralQueryPB*>(
      &::demo::_GeneralQueryPB_default_instance_);
}
inline const ::demo::GeneralQueryPB& QueryRequestPB::query() const {
  // @@protoc_insertion_point(field_get:demo.QueryRequestPB.query)
  return _internal_query();
}
inline ::demo::GeneralQueryPB* QueryRequestPB::release_query() {
  // @@protoc_insertion_point(field_release:demo.QueryRequestPB.query)
  
  ::demo::GeneralQueryPB* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::demo::GeneralQueryPB* QueryRequestPB::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::GeneralQueryPB>(GetArenaNoVirtual());
    query_ = p;
  }
  return query_;
}
inline ::demo::GeneralQueryPB* QueryRequestPB::mutable_query() {
  // @@protoc_insertion_point(field_mutable:demo.QueryRequestPB.query)
  return _internal_mutable_query();
}
inline void QueryRequestPB::set_allocated_query(::demo::GeneralQueryPB* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:demo.QueryRequestPB.query)
}

// -------------------------------------------------------------------

// QueryResponsePB

// .demo.Status status = 1;
inline bool QueryResponsePB::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool QueryResponsePB::has_status() const {
  return _internal_has_status();
}
inline const ::demo::Status& QueryResponsePB::_internal_status() const {
  const ::demo::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::Status*>(
      &::demo::_Status_default_instance_);
}
inline const ::demo::Status& QueryResponsePB::status() const {
  // @@protoc_insertion_point(field_get:demo.QueryResponsePB.status)
  return _internal_status();
}
inline ::demo::Status* QueryResponsePB::release_status() {
  // @@protoc_insertion_point(field_release:demo.QueryResponsePB.status)
  
  ::demo::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::demo::Status* QueryResponsePB::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::demo::Status* QueryResponsePB::mutable_status() {
  // @@protoc_insertion_point(field_mutable:demo.QueryResponsePB.status)
  return _internal_mutable_status();
}
inline void QueryResponsePB::set_allocated_status(::demo::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:demo.QueryResponsePB.status)
}

// uint64 hits = 2;
inline void QueryResponsePB::clear_hits() {
  hits_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryResponsePB::_internal_hits() const {
  return hits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryResponsePB::hits() const {
  // @@protoc_insertion_point(field_get:demo.QueryResponsePB.hits)
  return _internal_hits();
}
inline void QueryResponsePB::_internal_set_hits(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hits_ = value;
}
inline void QueryResponsePB::set_hits(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hits(value);
  // @@protoc_insertion_point(field_set:demo.QueryResponsePB.hits)
}

// repeated int64 ids = 3;
inline int QueryResponsePB::_internal_ids_size() const {
  return ids_.size();
}
inline int QueryResponsePB::ids_size() const {
  return _internal_ids_size();
}
inline void QueryResponsePB::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryResponsePB::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryResponsePB::ids(int index) const {
  // @@protoc_insertion_point(field_get:demo.QueryResponsePB.ids)
  return _internal_ids(index);
}
inline void QueryResponsePB::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.QueryResponsePB.ids)
}
inline void QueryResponsePB::_internal_add_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  ids_.Add(value);
}
inline void QueryResponsePB::add_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:demo.QueryResponsePB.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
QueryResponsePB::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
QueryResponsePB::ids() const {
  // @@protoc_insertion_point(field_list:demo.QueryResponsePB.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
QueryResponsePB::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
QueryResponsePB::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:demo.QueryResponsePB.ids)
  return _internal_mutable_ids();
}

// repeated float score = 4;
inline int QueryResponsePB::_internal_score_size() const {
  return score_.size();
}
inline int QueryResponsePB::score_size() const {
  return _internal_score_size();
}
inline void QueryResponsePB::clear_score() {
  score_.Clear();
}
inline float QueryResponsePB::_internal_score(int index) const {
  return score_.Get(index);
}
inline float QueryResponsePB::score(int index) const {
  // @@protoc_insertion_point(field_get:demo.QueryResponsePB.score)
  return _internal_score(index);
}
inline void QueryResponsePB::set_score(int index, float value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.QueryResponsePB.score)
}
inline void QueryResponsePB::_internal_add_score(float value) {
  score_.Add(value);
}
inline void QueryResponsePB::add_score(float value) {
  _internal_add_score(value);
  // @@protoc_insertion_point(field_add:demo.QueryResponsePB.score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QueryResponsePB::_internal_score() const {
  return score_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QueryResponsePB::score() const {
  // @@protoc_insertion_point(field_list:demo.QueryResponsePB.score)
  return _internal_score();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QueryResponsePB::_internal_mutable_score() {
  return &score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QueryResponsePB::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:demo.QueryResponsePB.score)
  return _internal_mutable_score();
}

// repeated float distance = 5;
inline int QueryResponsePB::_internal_distance_size() const {
  return distance_.size();
}
inline int QueryResponsePB::distance_size() const {
  return _internal_distance_size();
}
inline void QueryResponsePB::clear_distance() {
  distance_.Clear();
}
inline float QueryResponsePB::_internal_distance(int index) const {
  return distance_.Get(index);
}
inline float QueryResponsePB::distance(int index) const {
  // @@protoc_insertion_point(field_get:demo.QueryResponsePB.distance)
  return _internal_distance(index);
}
inline void QueryResponsePB::set_distance(int index, float value) {
  distance_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.QueryResponsePB.distance)
}
inline void QueryResponsePB::_internal_add_distance(float value) {
  distance_.Add(value);
}
inline void QueryResponsePB::add_distance(float value) {
  _internal_add_distance(value);
  // @@protoc_insertion_point(field_add:demo.QueryResponsePB.distance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QueryResponsePB::_internal_distance() const {
  return distance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QueryResponsePB::distance() const {
  // @@protoc_insertion_point(field_list:demo.QueryResponsePB.distance)
  return _internal_distance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QueryResponsePB::_internal_mutable_distance() {
  return &distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QueryResponsePB::mutable_distance() {
  // @@protoc_insertion_point(field_mutable_list:demo.QueryResponsePB.distance)
  return _internal_mutable_distance();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace demo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::demo::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::demo::DataType>() {
  return ::demo::DataType_descriptor();
}
template <> struct is_proto_enum< ::demo::CompareOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::demo::CompareOperator>() {
  return ::demo::CompareOperator_descriptor();
}
template <> struct is_proto_enum< ::demo::QueryRelation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::demo::QueryRelation>() {
  return ::demo::QueryRelation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
