// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColumnSchemaPB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColumnTypePB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_status_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_status_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TableSchemaPB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorColumnInfoPB_common_2eproto;
namespace demo {
class VectorColumnInfoPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VectorColumnInfoPB> _instance;
} _VectorColumnInfoPB_default_instance_;
class ColumnTypePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColumnTypePB> _instance;
} _ColumnTypePB_default_instance_;
class ColumnSchemaPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColumnSchemaPB> _instance;
} _ColumnSchemaPB_default_instance_;
class TableSchemaPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableSchemaPB> _instance;
} _TableSchemaPB_default_instance_;
class CreateTableRequestPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTableRequestPB> _instance;
} _CreateTableRequestPB_default_instance_;
class CreateTableResponsePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTableResponsePB> _instance;
} _CreateTableResponsePB_default_instance_;
}  // namespace demo
static void InitDefaultsscc_info_ColumnSchemaPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_ColumnSchemaPB_default_instance_;
    new (ptr) ::demo::ColumnSchemaPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::ColumnSchemaPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColumnSchemaPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ColumnSchemaPB_common_2eproto}, {
      &scc_info_ColumnTypePB_common_2eproto.base,}};

static void InitDefaultsscc_info_ColumnTypePB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_ColumnTypePB_default_instance_;
    new (ptr) ::demo::ColumnTypePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::ColumnTypePB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColumnTypePB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ColumnTypePB_common_2eproto}, {
      &scc_info_VectorColumnInfoPB_common_2eproto.base,}};

static void InitDefaultsscc_info_CreateTableRequestPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_CreateTableRequestPB_default_instance_;
    new (ptr) ::demo::CreateTableRequestPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::CreateTableRequestPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateTableRequestPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateTableRequestPB_common_2eproto}, {
      &scc_info_TableSchemaPB_common_2eproto.base,}};

static void InitDefaultsscc_info_CreateTableResponsePB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_CreateTableResponsePB_default_instance_;
    new (ptr) ::demo::CreateTableResponsePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::CreateTableResponsePB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateTableResponsePB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateTableResponsePB_common_2eproto}, {
      &scc_info_Status_status_2eproto.base,
      &scc_info_TableSchemaPB_common_2eproto.base,}};

static void InitDefaultsscc_info_TableSchemaPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_TableSchemaPB_default_instance_;
    new (ptr) ::demo::TableSchemaPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::TableSchemaPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TableSchemaPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TableSchemaPB_common_2eproto}, {
      &scc_info_ColumnSchemaPB_common_2eproto.base,}};

static void InitDefaultsscc_info_VectorColumnInfoPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_VectorColumnInfoPB_default_instance_;
    new (ptr) ::demo::VectorColumnInfoPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::VectorColumnInfoPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorColumnInfoPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VectorColumnInfoPB_common_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::VectorColumnInfoPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::VectorColumnInfoPB, dimension_),
  PROTOBUF_FIELD_OFFSET(::demo::VectorColumnInfoPB, element_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::ColumnTypePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::ColumnTypePB, type_),
  PROTOBUF_FIELD_OFFSET(::demo::ColumnTypePB, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::ColumnSchemaPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::ColumnSchemaPB, id_),
  PROTOBUF_FIELD_OFFSET(::demo::ColumnSchemaPB, name_),
  PROTOBUF_FIELD_OFFSET(::demo::ColumnSchemaPB, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::TableSchemaPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::TableSchemaPB, id_),
  PROTOBUF_FIELD_OFFSET(::demo::TableSchemaPB, name_),
  PROTOBUF_FIELD_OFFSET(::demo::TableSchemaPB, columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::CreateTableRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::CreateTableRequestPB, request_id_),
  PROTOBUF_FIELD_OFFSET(::demo::CreateTableRequestPB, schema_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::CreateTableResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::CreateTableResponsePB, status_),
  PROTOBUF_FIELD_OFFSET(::demo::CreateTableResponsePB, schema_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::demo::VectorColumnInfoPB)},
  { 7, -1, sizeof(::demo::ColumnTypePB)},
  { 14, -1, sizeof(::demo::ColumnSchemaPB)},
  { 22, -1, sizeof(::demo::TableSchemaPB)},
  { 30, -1, sizeof(::demo::CreateTableRequestPB)},
  { 37, -1, sizeof(::demo::CreateTableResponsePB)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_VectorColumnInfoPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_ColumnTypePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_ColumnSchemaPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_TableSchemaPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_CreateTableRequestPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_CreateTableResponsePB_default_instance_),
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022\004demo\032\014status.proto\"M\n\022Ve"
  "ctorColumnInfoPB\022\021\n\tdimension\030\001 \001(\003\022$\n\014e"
  "lement_type\030\002 \001(\0162\016.demo.DataType\"T\n\014Col"
  "umnTypePB\022\034\n\004type\030\001 \001(\0162\016.demo.DataType\022"
  "&\n\004info\030\002 \001(\0132\030.demo.VectorColumnInfoPB\""
  "L\n\016ColumnSchemaPB\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 "
  "\001(\t\022 \n\004type\030\003 \001(\0132\022.demo.ColumnTypePB\"P\n"
  "\rTableSchemaPB\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t"
  "\022%\n\007columns\030\003 \001(\0132\024.demo.ColumnSchemaPB\""
  "O\n\024CreateTableRequestPB\022\022\n\nrequest_id\030\001 "
  "\001(\004\022#\n\006schema\030\002 \001(\0132\023.demo.TableSchemaPB"
  "\"Z\n\025CreateTableResponsePB\022\034\n\006status\030\001 \001("
  "\0132\014.demo.Status\022#\n\006schema\030\002 \001(\0132\023.demo.T"
  "ableSchemaPB*\225\001\n\010DataType\022\010\n\004NULL\020\000\022\010\n\004I"
  "NT8\020\001\022\t\n\005INT16\020\002\022\t\n\005INT32\020\003\022\t\n\005INT64\020\004\022\n"
  "\n\006STRING\020\024\022\010\n\004BOOL\020\036\022\t\n\005FLOAT\020(\022\r\n\tHALFF"
  "LOAT\020)\022\n\n\006DOUBLE\020*\022\n\n\006VECTOR\020d\022\014\n\007UNKNOW"
  "N\020\217Nb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2eproto_deps[1] = {
  &::descriptor_table_status_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2eproto_sccs[6] = {
  &scc_info_ColumnSchemaPB_common_2eproto.base,
  &scc_info_ColumnTypePB_common_2eproto.base,
  &scc_info_CreateTableRequestPB_common_2eproto.base,
  &scc_info_CreateTableResponsePB_common_2eproto.base,
  &scc_info_TableSchemaPB_common_2eproto.base,
  &scc_info_VectorColumnInfoPB_common_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2eproto_once;
static bool descriptor_table_common_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto = {
  &descriptor_table_common_2eproto_initialized, descriptor_table_protodef_common_2eproto, "common.proto", 692,
  &descriptor_table_common_2eproto_once, descriptor_table_common_2eproto_sccs, descriptor_table_common_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_common_2eproto::offsets,
  file_level_metadata_common_2eproto, 6, file_level_enum_descriptors_common_2eproto, file_level_service_descriptors_common_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2eproto), true);
namespace demo {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 20:
    case 30:
    case 40:
    case 41:
    case 42:
    case 100:
    case 9999:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VectorColumnInfoPB::InitAsDefaultInstance() {
}
class VectorColumnInfoPB::_Internal {
 public:
};

VectorColumnInfoPB::VectorColumnInfoPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.VectorColumnInfoPB)
}
VectorColumnInfoPB::VectorColumnInfoPB(const VectorColumnInfoPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dimension_, &from.dimension_,
    static_cast<size_t>(reinterpret_cast<char*>(&element_type_) -
    reinterpret_cast<char*>(&dimension_)) + sizeof(element_type_));
  // @@protoc_insertion_point(copy_constructor:demo.VectorColumnInfoPB)
}

void VectorColumnInfoPB::SharedCtor() {
  ::memset(&dimension_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_type_) -
      reinterpret_cast<char*>(&dimension_)) + sizeof(element_type_));
}

VectorColumnInfoPB::~VectorColumnInfoPB() {
  // @@protoc_insertion_point(destructor:demo.VectorColumnInfoPB)
  SharedDtor();
}

void VectorColumnInfoPB::SharedDtor() {
}

void VectorColumnInfoPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VectorColumnInfoPB& VectorColumnInfoPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VectorColumnInfoPB_common_2eproto.base);
  return *internal_default_instance();
}


void VectorColumnInfoPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.VectorColumnInfoPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dimension_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_type_) -
      reinterpret_cast<char*>(&dimension_)) + sizeof(element_type_));
  _internal_metadata_.Clear();
}

const char* VectorColumnInfoPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 dimension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.DataType element_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_element_type(static_cast<::demo::DataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorColumnInfoPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.VectorColumnInfoPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 dimension = 1;
  if (this->dimension() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_dimension(), target);
  }

  // .demo.DataType element_type = 2;
  if (this->element_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_element_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.VectorColumnInfoPB)
  return target;
}

size_t VectorColumnInfoPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.VectorColumnInfoPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 dimension = 1;
  if (this->dimension() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_dimension());
  }

  // .demo.DataType element_type = 2;
  if (this->element_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_element_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorColumnInfoPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.VectorColumnInfoPB)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorColumnInfoPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorColumnInfoPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.VectorColumnInfoPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.VectorColumnInfoPB)
    MergeFrom(*source);
  }
}

void VectorColumnInfoPB::MergeFrom(const VectorColumnInfoPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.VectorColumnInfoPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dimension() != 0) {
    _internal_set_dimension(from._internal_dimension());
  }
  if (from.element_type() != 0) {
    _internal_set_element_type(from._internal_element_type());
  }
}

void VectorColumnInfoPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.VectorColumnInfoPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorColumnInfoPB::CopyFrom(const VectorColumnInfoPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.VectorColumnInfoPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorColumnInfoPB::IsInitialized() const {
  return true;
}

void VectorColumnInfoPB::InternalSwap(VectorColumnInfoPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dimension_, other->dimension_);
  swap(element_type_, other->element_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorColumnInfoPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColumnTypePB::InitAsDefaultInstance() {
  ::demo::_ColumnTypePB_default_instance_._instance.get_mutable()->info_ = const_cast< ::demo::VectorColumnInfoPB*>(
      ::demo::VectorColumnInfoPB::internal_default_instance());
}
class ColumnTypePB::_Internal {
 public:
  static const ::demo::VectorColumnInfoPB& info(const ColumnTypePB* msg);
};

const ::demo::VectorColumnInfoPB&
ColumnTypePB::_Internal::info(const ColumnTypePB* msg) {
  return *msg->info_;
}
ColumnTypePB::ColumnTypePB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.ColumnTypePB)
}
ColumnTypePB::ColumnTypePB(const ColumnTypePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::demo::VectorColumnInfoPB(*from.info_);
  } else {
    info_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:demo.ColumnTypePB)
}

void ColumnTypePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColumnTypePB_common_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&info_)) + sizeof(type_));
}

ColumnTypePB::~ColumnTypePB() {
  // @@protoc_insertion_point(destructor:demo.ColumnTypePB)
  SharedDtor();
}

void ColumnTypePB::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void ColumnTypePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColumnTypePB& ColumnTypePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColumnTypePB_common_2eproto.base);
  return *internal_default_instance();
}


void ColumnTypePB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.ColumnTypePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* ColumnTypePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demo.DataType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::demo::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .demo.VectorColumnInfoPB info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnTypePB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.ColumnTypePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.DataType type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .demo.VectorColumnInfoPB info = 2;
  if (this->has_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.ColumnTypePB)
  return target;
}

size_t ColumnTypePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.ColumnTypePB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .demo.VectorColumnInfoPB info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // .demo.DataType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnTypePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.ColumnTypePB)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnTypePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColumnTypePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.ColumnTypePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.ColumnTypePB)
    MergeFrom(*source);
  }
}

void ColumnTypePB::MergeFrom(const ColumnTypePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.ColumnTypePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::demo::VectorColumnInfoPB::MergeFrom(from._internal_info());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ColumnTypePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.ColumnTypePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnTypePB::CopyFrom(const ColumnTypePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.ColumnTypePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnTypePB::IsInitialized() const {
  return true;
}

void ColumnTypePB::InternalSwap(ColumnTypePB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(info_, other->info_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnTypePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColumnSchemaPB::InitAsDefaultInstance() {
  ::demo::_ColumnSchemaPB_default_instance_._instance.get_mutable()->type_ = const_cast< ::demo::ColumnTypePB*>(
      ::demo::ColumnTypePB::internal_default_instance());
}
class ColumnSchemaPB::_Internal {
 public:
  static const ::demo::ColumnTypePB& type(const ColumnSchemaPB* msg);
};

const ::demo::ColumnTypePB&
ColumnSchemaPB::_Internal::type(const ColumnSchemaPB* msg) {
  return *msg->type_;
}
ColumnSchemaPB::ColumnSchemaPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.ColumnSchemaPB)
}
ColumnSchemaPB::ColumnSchemaPB(const ColumnSchemaPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_type()) {
    type_ = new ::demo::ColumnTypePB(*from.type_);
  } else {
    type_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:demo.ColumnSchemaPB)
}

void ColumnSchemaPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColumnSchemaPB_common_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(id_));
}

ColumnSchemaPB::~ColumnSchemaPB() {
  // @@protoc_insertion_point(destructor:demo.ColumnSchemaPB)
  SharedDtor();
}

void ColumnSchemaPB::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void ColumnSchemaPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColumnSchemaPB& ColumnSchemaPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColumnSchemaPB_common_2eproto.base);
  return *internal_default_instance();
}


void ColumnSchemaPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.ColumnSchemaPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ColumnSchemaPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "demo.ColumnSchemaPB.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.ColumnTypePB type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnSchemaPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.ColumnSchemaPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.ColumnSchemaPB.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .demo.ColumnTypePB type = 3;
  if (this->has_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.ColumnSchemaPB)
  return target;
}

size_t ColumnSchemaPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.ColumnSchemaPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .demo.ColumnTypePB type = 3;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnSchemaPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.ColumnSchemaPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnSchemaPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColumnSchemaPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.ColumnSchemaPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.ColumnSchemaPB)
    MergeFrom(*source);
  }
}

void ColumnSchemaPB::MergeFrom(const ColumnSchemaPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.ColumnSchemaPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_type()) {
    _internal_mutable_type()->::demo::ColumnTypePB::MergeFrom(from._internal_type());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ColumnSchemaPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.ColumnSchemaPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnSchemaPB::CopyFrom(const ColumnSchemaPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.ColumnSchemaPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnSchemaPB::IsInitialized() const {
  return true;
}

void ColumnSchemaPB::InternalSwap(ColumnSchemaPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnSchemaPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableSchemaPB::InitAsDefaultInstance() {
  ::demo::_TableSchemaPB_default_instance_._instance.get_mutable()->columns_ = const_cast< ::demo::ColumnSchemaPB*>(
      ::demo::ColumnSchemaPB::internal_default_instance());
}
class TableSchemaPB::_Internal {
 public:
  static const ::demo::ColumnSchemaPB& columns(const TableSchemaPB* msg);
};

const ::demo::ColumnSchemaPB&
TableSchemaPB::_Internal::columns(const TableSchemaPB* msg) {
  return *msg->columns_;
}
TableSchemaPB::TableSchemaPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.TableSchemaPB)
}
TableSchemaPB::TableSchemaPB(const TableSchemaPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_columns()) {
    columns_ = new ::demo::ColumnSchemaPB(*from.columns_);
  } else {
    columns_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:demo.TableSchemaPB)
}

void TableSchemaPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TableSchemaPB_common_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&columns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&columns_)) + sizeof(id_));
}

TableSchemaPB::~TableSchemaPB() {
  // @@protoc_insertion_point(destructor:demo.TableSchemaPB)
  SharedDtor();
}

void TableSchemaPB::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete columns_;
}

void TableSchemaPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableSchemaPB& TableSchemaPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableSchemaPB_common_2eproto.base);
  return *internal_default_instance();
}


void TableSchemaPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.TableSchemaPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && columns_ != nullptr) {
    delete columns_;
  }
  columns_ = nullptr;
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* TableSchemaPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "demo.TableSchemaPB.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.ColumnSchemaPB columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_columns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableSchemaPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.TableSchemaPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.TableSchemaPB.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .demo.ColumnSchemaPB columns = 3;
  if (this->has_columns()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::columns(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.TableSchemaPB)
  return target;
}

size_t TableSchemaPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.TableSchemaPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .demo.ColumnSchemaPB columns = 3;
  if (this->has_columns()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *columns_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableSchemaPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.TableSchemaPB)
  GOOGLE_DCHECK_NE(&from, this);
  const TableSchemaPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableSchemaPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.TableSchemaPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.TableSchemaPB)
    MergeFrom(*source);
  }
}

void TableSchemaPB::MergeFrom(const TableSchemaPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.TableSchemaPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_columns()) {
    _internal_mutable_columns()->::demo::ColumnSchemaPB::MergeFrom(from._internal_columns());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void TableSchemaPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.TableSchemaPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableSchemaPB::CopyFrom(const TableSchemaPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.TableSchemaPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSchemaPB::IsInitialized() const {
  return true;
}

void TableSchemaPB::InternalSwap(TableSchemaPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(columns_, other->columns_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSchemaPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTableRequestPB::InitAsDefaultInstance() {
  ::demo::_CreateTableRequestPB_default_instance_._instance.get_mutable()->schema_ = const_cast< ::demo::TableSchemaPB*>(
      ::demo::TableSchemaPB::internal_default_instance());
}
class CreateTableRequestPB::_Internal {
 public:
  static const ::demo::TableSchemaPB& schema(const CreateTableRequestPB* msg);
};

const ::demo::TableSchemaPB&
CreateTableRequestPB::_Internal::schema(const CreateTableRequestPB* msg) {
  return *msg->schema_;
}
CreateTableRequestPB::CreateTableRequestPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.CreateTableRequestPB)
}
CreateTableRequestPB::CreateTableRequestPB(const CreateTableRequestPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_schema()) {
    schema_ = new ::demo::TableSchemaPB(*from.schema_);
  } else {
    schema_ = nullptr;
  }
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:demo.CreateTableRequestPB)
}

void CreateTableRequestPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTableRequestPB_common_2eproto.base);
  ::memset(&schema_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_id_) -
      reinterpret_cast<char*>(&schema_)) + sizeof(request_id_));
}

CreateTableRequestPB::~CreateTableRequestPB() {
  // @@protoc_insertion_point(destructor:demo.CreateTableRequestPB)
  SharedDtor();
}

void CreateTableRequestPB::SharedDtor() {
  if (this != internal_default_instance()) delete schema_;
}

void CreateTableRequestPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTableRequestPB& CreateTableRequestPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTableRequestPB_common_2eproto.base);
  return *internal_default_instance();
}


void CreateTableRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.CreateTableRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
  request_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CreateTableRequestPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.TableSchemaPB schema = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTableRequestPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.CreateTableRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->request_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_request_id(), target);
  }

  // .demo.TableSchemaPB schema = 2;
  if (this->has_schema()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::schema(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.CreateTableRequestPB)
  return target;
}

size_t CreateTableRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.CreateTableRequestPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .demo.TableSchemaPB schema = 2;
  if (this->has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schema_);
  }

  // uint64 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_request_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTableRequestPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.CreateTableRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTableRequestPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTableRequestPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.CreateTableRequestPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.CreateTableRequestPB)
    MergeFrom(*source);
  }
}

void CreateTableRequestPB::MergeFrom(const CreateTableRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.CreateTableRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_schema()) {
    _internal_mutable_schema()->::demo::TableSchemaPB::MergeFrom(from._internal_schema());
  }
  if (from.request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
}

void CreateTableRequestPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.CreateTableRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTableRequestPB::CopyFrom(const CreateTableRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.CreateTableRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableRequestPB::IsInitialized() const {
  return true;
}

void CreateTableRequestPB::InternalSwap(CreateTableRequestPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(schema_, other->schema_);
  swap(request_id_, other->request_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTableRequestPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTableResponsePB::InitAsDefaultInstance() {
  ::demo::_CreateTableResponsePB_default_instance_._instance.get_mutable()->status_ = const_cast< ::demo::Status*>(
      ::demo::Status::internal_default_instance());
  ::demo::_CreateTableResponsePB_default_instance_._instance.get_mutable()->schema_ = const_cast< ::demo::TableSchemaPB*>(
      ::demo::TableSchemaPB::internal_default_instance());
}
class CreateTableResponsePB::_Internal {
 public:
  static const ::demo::Status& status(const CreateTableResponsePB* msg);
  static const ::demo::TableSchemaPB& schema(const CreateTableResponsePB* msg);
};

const ::demo::Status&
CreateTableResponsePB::_Internal::status(const CreateTableResponsePB* msg) {
  return *msg->status_;
}
const ::demo::TableSchemaPB&
CreateTableResponsePB::_Internal::schema(const CreateTableResponsePB* msg) {
  return *msg->schema_;
}
void CreateTableResponsePB::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
CreateTableResponsePB::CreateTableResponsePB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.CreateTableResponsePB)
}
CreateTableResponsePB::CreateTableResponsePB(const CreateTableResponsePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::demo::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_schema()) {
    schema_ = new ::demo::TableSchemaPB(*from.schema_);
  } else {
    schema_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:demo.CreateTableResponsePB)
}

void CreateTableResponsePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTableResponsePB_common_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&schema_) -
      reinterpret_cast<char*>(&status_)) + sizeof(schema_));
}

CreateTableResponsePB::~CreateTableResponsePB() {
  // @@protoc_insertion_point(destructor:demo.CreateTableResponsePB)
  SharedDtor();
}

void CreateTableResponsePB::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete schema_;
}

void CreateTableResponsePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTableResponsePB& CreateTableResponsePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTableResponsePB_common_2eproto.base);
  return *internal_default_instance();
}


void CreateTableResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.CreateTableResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CreateTableResponsePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demo.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.TableSchemaPB schema = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTableResponsePB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.CreateTableResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.Status status = 1;
  if (this->has_status()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target, stream);
  }

  // .demo.TableSchemaPB schema = 2;
  if (this->has_schema()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::schema(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.CreateTableResponsePB)
  return target;
}

size_t CreateTableResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.CreateTableResponsePB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .demo.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .demo.TableSchemaPB schema = 2;
  if (this->has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schema_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTableResponsePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.CreateTableResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTableResponsePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTableResponsePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.CreateTableResponsePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.CreateTableResponsePB)
    MergeFrom(*source);
  }
}

void CreateTableResponsePB::MergeFrom(const CreateTableResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.CreateTableResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::demo::Status::MergeFrom(from._internal_status());
  }
  if (from.has_schema()) {
    _internal_mutable_schema()->::demo::TableSchemaPB::MergeFrom(from._internal_schema());
  }
}

void CreateTableResponsePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.CreateTableResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTableResponsePB::CopyFrom(const CreateTableResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.CreateTableResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableResponsePB::IsInitialized() const {
  return true;
}

void CreateTableResponsePB::InternalSwap(CreateTableResponsePB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(schema_, other->schema_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTableResponsePB::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace demo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::demo::VectorColumnInfoPB* Arena::CreateMaybeMessage< ::demo::VectorColumnInfoPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::VectorColumnInfoPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::ColumnTypePB* Arena::CreateMaybeMessage< ::demo::ColumnTypePB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::ColumnTypePB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::ColumnSchemaPB* Arena::CreateMaybeMessage< ::demo::ColumnSchemaPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::ColumnSchemaPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::TableSchemaPB* Arena::CreateMaybeMessage< ::demo::TableSchemaPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::TableSchemaPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::CreateTableRequestPB* Arena::CreateMaybeMessage< ::demo::CreateTableRequestPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::CreateTableRequestPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::CreateTableResponsePB* Arena::CreateMaybeMessage< ::demo::CreateTableResponsePB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::CreateTableResponsePB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
